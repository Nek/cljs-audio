{"version":3,"sources":["cljs_audio/test_utils.cljs"],"mappings":"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","names":["p__53775","map__53776","cljs.core/--destructure-map","cljs.core.get","cljs-audio.test-utils/delayed-waveforms","frequency","gain","cljs-audio.modules/osc-bank","cljs-audio.modules/fx","p__53777","map__53778","cljs-audio.test-utils/simple-voice","detune","type","p__53779","map__53780","cljs-audio.test-utils/simple-voice-minus-gain","p__53781","map__53782","cljs-audio.test-utils/simple-voice-replace-gain","p__53783","map__53784","cljs-audio.test-utils/fx","time","p__53785","map__53786","cljs-audio.test-utils/vca","p__53787","map__53788","cljs-audio.test-utils/osc-bank","p__53789","map__53790","cljs-audio.test-utils/synth"],"sourcesContent":["(ns cljs-audio.test-utils\n  (:require [cljs-audio.modules :as m]))\n\n(defn delayed-waveforms [{:keys [frequency gain]}]\n  [{:oscs (m/osc-bank {:frequency frequency :gain gain})\n    :fx   (m/fx {:gain gain})}\n   #{[:oscs :fx]\n     [:fx :>]}])\n\n(defn simple-voice [{:keys [frequency detune type gain]\n                     :or   {frequency 220 detune 0 type \"triangle\" gain 1}}]\n  [{:osc  [:oscillator {:frequency frequency\n                        :detune    detune\n                        :type      type} [1 2]]\n    :vca2 [:gain {:gain gain}]}\n   #{[:osc :vca2]\n     [:vca2 :>]\n     [:> :osc]}])\n\n(defn simple-voice-minus-gain [{:keys [frequency detune type gain]\n                                :or   {frequency 220 detune 0 type \"triangle\" gain 1}}]\n  [{:osc [:oscillator {:frequency frequency\n                       :detune    detune\n                       :type      type} [1 2]]}\n   #{[:osc :>]}])\n\n(defn simple-voice-replace-gain [{:keys [frequency detune type gain]\n                                  :or   {frequency 220 detune 0 type \"triangle\" gain 1}}]\n  [{:osc  [:oscillator {:frequency frequency\n                        :detune    detune\n                        :type      type} [1 2]]\n    :osc2 [:oscillator {:frequency frequency\n                        :detune    detune\n                        :type      type} [1]]}\n   #{[:osc :>]\n     [:osc2 :osc]}])\n\n\n(defn fx [{:keys [time] :or {time 0.5}}]\n  [{:io [:delay {:time time} [5]]} {:io :>\n                                    :>  :io}])\n\n\n(defn vca [{:keys [gain] :or {gain 1}}]\n  [{:io [:gain {:gain gain}]}\n   #{[:io :>]\n     [:> :io]}])\n\n(defn osc-bank [{:keys [frequency gain] :or {frequency 220 gain 1}}]\n  [{:1   [:oscillator {:frequency frequency :type \"sine\"}]\n    :2   [:oscillator {:frequency frequency :type \"triangle\"}]\n    :3   [:oscillator {:frequency frequency :type \"square\"}]\n    :mix [:gain {}]\n    :vca (vca {:gain gain})}\n   {:1   :mix\n    :2   :mix\n    :3   :mix\n    :mix :vca\n    :vca :>}])\n\n(defn synth [{:keys [frequency] :or {frequency 220}}]\n  [{:voice1 (simple-voice {:frequency frequency})\n    :voice2 (simple-voice {:frequency frequency})\n    :vca    [:gain {}]}\n   #{[:voice1 :vca]\n     [:voice2 :vca]\n     [:vca :>]}])\n"]}