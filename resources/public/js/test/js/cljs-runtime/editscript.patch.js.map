{"version":3,"sources":["editscript/patch.cljc"],"mappings":"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","names":["editscript.patch/vget","x","p","G__49975","cljs.core/Keyword","js/Error","editscript.edit/get-type","cljs.core.get","cljs.core.nth","editscript.patch/vdelete","G__49981","cljs.core.dissoc","cljs.core.into","cljs.core.subvec","clojure.set.difference","cljs.core/split-at","p1__49979#","cljs.core.concat","cljs.core/first","cljs.core/next","cljs.core/second","cljs.core.apply","cljs.core/list","editscript.patch/vadd","v","G__49987","cljs.core.assoc","cljs.core.conj","p1__49986#","editscript.patch/sreplace","edits","i","cljs.core/volatile!","cljs.core/str","cljs.core/persistent!","cljs.core.reduce","ss","e","cljs.core/integer?","s","cljs.core/deref","cljs.core.subs","cljs.core.partial","cljs.core/+","cljs.core.conj_BANG_","cljs.core._EQ_","cljs.core/count","cljs.core/transient","editscript.patch/vreplace","G__50010","p1__50005#","cljs.core/rest","editscript.patch/valter","o","G__50018","p__50031","vec__50032","editscript.patch/patch*","old","path","op","value","vec__50050","seq__50051","cljs.core/seq","first__50052","f","r","up"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.patch\n  (:require [clojure.set :as set]\n            [editscript.edit :as e]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn- vget\n  [x p]\n  (case (e/get-type x)\n    (:map :vec :set) (get x p)\n    :lst             (nth x p)))\n\n(defn- vdelete\n  [x p]\n  (case (e/get-type x)\n    ;;NB, there is a special case where dissoc has no effect:\n    ;;if p is ##NaN, then p cannot be found in x, for (= ##NaN ##NaN) is false!\n    :map (dissoc x p)\n    :vec (into (subvec x 0 p) (subvec x (inc ^long p)))\n    :set (set/difference x #{p})\n    :lst (->> (split-at p x)\n              (#(concat (first %) (next (second %))))\n              (apply list))))\n\n(defn- vadd\n  [x p v]\n  (case (e/get-type x)\n    :map (assoc x p v)\n    :vec (into (conj (subvec x 0 p) v) (subvec x p))\n    :set (conj x v)\n    :lst (->> (split-at p x)\n              (#(concat (first %) (conj (second %) v)))\n              (apply list))))\n\n(defn- sreplace\n  [x edits]\n  (let [i (volatile! 0)]\n    (apply str\n           (persistent!\n            (reduce\n             (fn [ss e]\n               (cond\n                 (integer? e)     (let [s (subs x @i (+ ^long @i ^long e))]\n                                    (vswap! i (partial + e))\n                                    (conj! ss s))\n                 (= (first e) :-) (do (vswap! i (partial + (second e))) ss)\n                 (= (first e) :r) (let [s (second e)]\n                                    (vswap! i (partial + (count s)))\n                                    (conj! ss s))\n                 (= (first e) :+) (conj! ss (second e))))\n             (transient [])\n             edits)))))\n\n(defn- vreplace\n  [x p v]\n  (case (e/get-type x)\n    :map (assoc x p v)\n    :vec (into (conj (subvec x 0 p) v) (subvec x (inc ^long p)))\n    :set (-> x (set/difference #{p}) (conj v))\n    :lst (->> (split-at p x)\n              (#(concat (first %) (conj (rest (second %)) v)))\n              (apply list))))\n\n(defn- valter\n  [x p o v]\n  (case o\n    :- (vdelete x p)\n    :+ (vadd x p v)\n    :r (vreplace x p v)\n    :s (vreplace x p (sreplace (vget x p) v))))\n\n(defn patch*\n  [old [path op value]]\n  (letfn [(up [x p o v]\n            (let [[f & r] p]\n              (if r\n                (valter x f :r (up (vget x f) r o v))\n                (if (seq p)\n                  (valter x f o v)\n                  (if (= o :s)\n                    (sreplace x v)\n                    v)))))]\n    (up old path op value)))\n"]}