{"version":3,"sources":["shadow/test/browser.cljs"],"mappings":";AASA,4BAAA,5BAAMA;AAAN,sCACM,2CAAA,AAAA,8FAAA,2CAAA,sDAAA,mFAAA,gFAAA,AAAA,iIAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,8FAAA,AAAA,oFAAA,AAAA,+BAAA,AAAA,KAAA,AAAA,IAAA,AAAA,KAAA,AAAA,KAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,2CAAA,AAAA,AAAAA,yDAAA,SAAA,uFAAA,AAAA,wIAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,8FAAA,AAAA,2FAAA,AAAA,+BAAA,AAAA,KAAA,AAAA,IAAA,AAAA,MAAA,AAAA,MAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,kDAAA,AAAA,AAAAA,gEAAA,SAAA,gFAAA,AAAA,gIAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,8FAAA,AAAA,mFAAA,AAAA,+BAAA,AAAA,KAAA,AAAA,IAAA,AAAA,MAAA,AAAA,MAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,2CAAA,AAAA,AAAAA,yDAAA,SAAA,8EAAA,AAAA,4HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,8FAAA,AAAA,+EAAA,AAAA,+BAAA,AAAA,KAAA,AAAA,IAAA,AAAA,MAAA,AAAA,MAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,yCAAA,AAAA,AAAAA,uDAAA,yBAAA,AAAA,qGAAA,2CAAA,sDAAA,mFAAA,0FAAA,AAAA,oJAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,qGAAA,AAAA,iGAAA,AAAA,kCAAA,AAAA,KAAA,AAAA,IAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,qDAAA,AAAA,AAAAA,mEAAA,yBAAA,AAAA,mGAAA,2CAAA,sDAAA,mFAAA,+EAAA,AAAA,8HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,mGAAA,AAAA,4EAAA,AAAA,iCAAA,AAAA,KAAA,AAAA,IAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,0CAAA,AAAA,AAAAA,wDAAA,18PACA,AAACC;;AAEL,OAACC,wDAAiB,gEAAA,hEAACC;;AAErB,2BAAA,3BAAMC,8DAAMC;AAAZ,AAEE,QAACA,qCAAAA,uCAAAA;;AAGH,2BAAA,3BAAeC;AAAf,AACE,gDAAA,mFAAA,nIAACC;;AACD,OAACb","names":["shadow.test.browser/start","cljs-audio.updates-test/make-updates-test","cljs-audio.updates-test/update->commands-test","cljs-audio.updates-test/resolve-from-test","cljs-audio.updates-test/resolve-to-test","cljs-audio.scheduling-test/schedule-parameters-test","cljs-audio.envelopes-test/envelopes-test","shadow.test.env/reset-test-data!","shadow.test.run_all_tests","cljs_test_display.core.init_BANG_","shadow.test.browser/stop","done","shadow.test.browser/init","shadow.dom.append"],"sourcesContent":["(ns shadow.test.browser\n  \"generic browser test runner\"\n  {:dev/always true}\n  (:require\n    [shadow.test :as st]\n    [shadow.test.env :as env]\n    [shadow.dom :as dom]\n    [cljs-test-display.core :as ctd]))\n\n(defn start []\n  (-> (env/get-test-data)\n      (env/reset-test-data!))\n\n  (st/run-all-tests (ctd/init! \"test-root\")))\n\n(defn stop [done]\n  ;; FIXME: determine if async tests are still pending\n  (done))\n\n;; not sure we need to do something once?\n(defn ^:export init []\n  (dom/append [:div#test-root])\n  (start))\n"]}