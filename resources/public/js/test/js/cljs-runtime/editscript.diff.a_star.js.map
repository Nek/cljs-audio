{"version":3,"sources":["editscript/diff/a_star.cljc"],"mappings":";AAwBA,AAAA;AAAA;;;+BAAA,/BAAaiC;;AAAb,IAAAjC,kDAAA,WACakC;AADb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBACaiC,qBAAAA;IADbhC,kBAAA,CAAAC,gCAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACagC,mCAAAA;;AADb,IAAA7B,kBAAA,CAAAF,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACa6B,mCAAAA;;AADb,MAAA,AAAA5B,2BAAA,iBACa4B;;;;AADb,AAAA;;;kCAAA,lCACG/B,4EAAU+B;AADb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFACaA,0BAAAA;AADb,OACaA,oDAAAA;;AADb,OAAAlC,gDACakC;;;;AADb,IAAA3B,mDAAA,WAEc2B;AAFd,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAEciC,qBAAAA;IAFdhC,kBAAA,CAAAM,iCAAA,AAAAJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAEcgC,mCAAAA;;AAFd,IAAA7B,kBAAA,CAAAG,iCAAA;AAAA,AAAA,GAAA,GAAA,CAAAH,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAEc6B,mCAAAA;;AAFd,MAAA,AAAA5B,2BAAA,kBAEc4B;;;;AAFd,AAAA;;;mCAAA,nCAEG1B,8EAAW0B;AAFd,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAEcA,0BAAAA;AAFd,OAEcA,qDAAAA;;AAFd,OAAA3B,iDAEc2B;;;;AAFd,IAAAzB,sDAAA,WAGiByB;AAHjB,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAGiBiC,qBAAAA;IAHjBhC,kBAAA,CAAAQ,oCAAA,AAAAN,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAGiBgC,mCAAAA;;AAHjB,IAAA7B,kBAAA,CAAAK,oCAAA;AAAA,AAAA,GAAA,GAAA,CAAAL,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAGiB6B,mCAAAA;;AAHjB,MAAA,AAAA5B,2BAAA,qBAGiB4B;;;;AAHjB,AAAA;;;sCAAA,tCAGGxB,oFAAcwB;AAHjB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,2DAAA,rFAGiBA,0BAAAA;AAHjB,OAGiBA,wDAAAA;;AAHjB,OAAAzB,oDAGiByB;;;;AAHjB,IAAAvB,mDAAA,WAIcuB,MAAKC;AAJnB,AAAA,IAAAlC,kBAAA,EAAA,UAAA,OAAA,hBAIciC,qBAAAA;IAJdhC,kBAAA,CAAAU,iCAAA,AAAAR,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAIcgC,wCAAAA,lCAAKC,wCAAAA;;AAJnB,IAAA9B,kBAAA,CAAAO,iCAAA;AAAA,AAAA,GAAA,GAAA,CAAAP,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAIc6B,wCAAAA,lCAAKC,wCAAAA;;AAJnB,MAAA,AAAA7B,2BAAA,kBAIc4B;;;;AAJd,AAAA;;;mCAAA,nCAIGtB,8EAAWsB,MAAKC;AAJnB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAIcD,0BAAAA;AAJd,OAIcA,qDAAAA,MAAKC;;AAJnB,OAAAxB,iDAIcuB,MAAKC;;;;AAJnB,IAAAtB,iDAAA,WAKYqB;AALZ,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAKYiC,qBAAAA;IALZhC,kBAAA,CAAAY,+BAAA,AAAAV,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAKYgC,mCAAAA;;AALZ,IAAA7B,kBAAA,CAAAS,+BAAA;AAAA,AAAA,GAAA,GAAA,CAAAT,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAKY6B,mCAAAA;;AALZ,MAAA,AAAA5B,2BAAA,gBAKY4B;;;;AALZ,AAAA;;;iCAAA,jCAKGpB,0EAASoB;AALZ,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,sDAAA,hFAKYA,0BAAAA;AALZ,OAKYA,mDAAAA;;AALZ,OAAArB,+CAKYqB;;;;AALZ,IAAAnB,oDAAA,WAMemB;AANf,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAMeiC,qBAAAA;IANfhC,kBAAA,CAAAc,kCAAA,AAAAZ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAMegC,mCAAAA;;AANf,IAAA7B,kBAAA,CAAAW,kCAAA;AAAA,AAAA,GAAA,GAAA,CAAAX,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAMe6B,mCAAAA;;AANf,MAAA,AAAA5B,2BAAA,mBAMe4B;;;;AANf,AAAA;;;oCAAA,pCAMGlB,gFAAYkB;AANf,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,yDAAA,nFAMeA,0BAAAA;AANf,OAMeA,sDAAAA;;AANf,OAAAnB,kDAMemB;;;;AANf,IAAAjB,mDAAA,WAOciB;AAPd,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAOciC,qBAAAA;IAPdhC,kBAAA,CAAAgB,iCAAA,AAAAd,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAOcgC,mCAAAA;;AAPd,IAAA7B,kBAAA,CAAAa,iCAAA;AAAA,AAAA,GAAA,GAAA,CAAAb,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAOc6B,mCAAAA;;AAPd,MAAA,AAAA5B,2BAAA,kBAOc4B;;;;AAPd,AAAA;;;mCAAA,nCAOGhB,8EAAWgB;AAPd,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAOcA,0BAAAA;AAPd,OAOcA,qDAAAA;;AAPd,OAAAjB,iDAOciB;;;;AAPd,IAAAf,kDAAA,WAQae;AARb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAQaiC,qBAAAA;IARbhC,kBAAA,CAAAkB,gCAAA,AAAAhB,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAQagC,mCAAAA;;AARb,IAAA7B,kBAAA,CAAAe,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAf,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAQa6B,mCAAAA;;AARb,MAAA,AAAA5B,2BAAA,iBAQa4B;;;;AARb,AAAA;;;kCAAA,lCAQGd,4EAAUc;AARb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFAQaA,0BAAAA;AARb,OAQaA,oDAAAA;;AARb,OAAAf,gDAQae;;;;AARb,IAAAb,kDAAA,WASaa;AATb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBASaiC,qBAAAA;IATbhC,kBAAA,CAAAoB,gCAAA,AAAAlB,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TASagC,mCAAAA;;AATb,IAAA7B,kBAAA,CAAAiB,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAjB,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TASa6B,mCAAAA;;AATb,MAAA,AAAA5B,2BAAA,iBASa4B;;;;AATb,AAAA;;;kCAAA,lCASGZ,4EAAUY;AATb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFASaA,0BAAAA;AATb,OASaA,oDAAAA;;AATb,OAAAb,gDASaa;;;;AATb,IAAAX,kDAAA,WAUaW,MAAKC;AAVlB,AAAA,IAAAlC,kBAAA,EAAA,UAAA,OAAA,hBAUaiC,qBAAAA;IAVbhC,kBAAA,CAAAsB,gCAAA,AAAApB,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAUagC,wCAAAA,lCAAKC,wCAAAA;;AAVlB,IAAA9B,kBAAA,CAAAmB,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAnB,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAUa6B,wCAAAA,lCAAKC,wCAAAA;;AAVlB,MAAA,AAAA7B,2BAAA,iBAUa4B;;;;AAVb,AAAA;;;kCAAA,lCAUGV,4EAAUU,MAAKC;AAVlB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFAUaD,0BAAAA;AAVb,OAUaA,oDAAAA,MAAKC;;AAVlB,OAAAZ,gDAUaW,MAAKC;;;;AAVlB,IAAAV,mDAAA,WAWcS,MAAKE;AAXnB,AAAA,IAAAnC,kBAAA,EAAA,UAAA,OAAA,hBAWciC,qBAAAA;IAXdhC,kBAAA,CAAAwB,iCAAA,AAAAtB,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAWcgC,qCAAAA,/BAAKE,qCAAAA;;AAXnB,IAAA/B,kBAAA,CAAAqB,iCAAA;AAAA,AAAA,GAAA,GAAA,CAAArB,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAWc6B,qCAAAA,/BAAKE,qCAAAA;;AAXnB,MAAA,AAAA9B,2BAAA,kBAWc4B;;;;AAXd,AAAA;;;mCAAA,nCAWGR,8EAAWQ,MAAKE;AAXnB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAWcF,0BAAAA;AAXd,OAWcA,qDAAAA,MAAKE;;AAXnB,OAAAX,iDAWcS,MAAKE;;;;AAXnB,IAAAT,mDAAA,WAYoBO;AAZpB,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAYoBiC,qBAAAA;IAZpBhC,kBAAA,CAAA0B,iCAAA,AAAAxB,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAYoBgC,mCAAAA;;AAZpB,IAAA7B,kBAAA,CAAAuB,iCAAA;AAAA,AAAA,GAAA,GAAA,CAAAvB,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAYoB6B,mCAAAA;;AAZpB,MAAA,AAAA5B,2BAAA,kBAYoB4B;;;;AAZpB,AAAA;;;mCAAA,nCAYSN,8EAAWM;AAZpB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAYoBA,0BAAAA;AAZpB,OAYoBA,qDAAAA;;AAZpB,OAAAP,iDAYoBO;;;;AAZpB,IAAAL,kDAAA,WAamBK;AAbnB,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAamBiC,qBAAAA;IAbnBhC,kBAAA,CAAA4B,gCAAA,AAAA1B,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAamBgC,mCAAAA;;AAbnB,IAAA7B,kBAAA,CAAAyB,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAzB,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAamB6B,mCAAAA;;AAbnB,MAAA,AAAA5B,2BAAA,iBAamB4B;;;;AAbnB,AAAA;;;kCAAA,lCAaSJ,4EAAUI;AAbnB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFAamBA,0BAAAA;AAbnB,OAamBA,oDAAAA;;AAbnB,OAAAL,gDAamBK;;;;AAbnB,IAAAH,kDAAA,WAcaG,MAAKG;AAdlB,AAAA,IAAApC,kBAAA,EAAA,UAAA,OAAA,hBAcaiC,qBAAAA;IAdbhC,kBAAA,CAAA8B,gCAAA,AAAA5B,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAcagC,qCAAAA,/BAAKG,qCAAAA;;AAdlB,IAAAhC,kBAAA,CAAA2B,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAA3B,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAca6B,qCAAAA,/BAAKG,qCAAAA;;AAdlB,MAAA,AAAA/B,2BAAA,iBAca4B;;;;AAdb,AAAA;;;kCAAA,lCAcGF,4EAAUE,MAAKG;AAdlB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFAcaH,0BAAAA;AAdb,OAcaA,oDAAAA,MAAKG;;AAdlB,OAAAN,gDAcaG,MAAKG;;;;AAdlB,AAgBA,AAAA;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,sEAAAC,tEAASK;;AAAT,CAAA,AAAA,qFAAA,rFAASA,gGAYGT;;AAZZ,AAAA,gBAAA,ZAYYA;AAZZ,AAYkB,sBAAA,AAAIA,fAAcsB;;;AAZpC,CAAA,AAAA,sFAAA,tFAASb,iGAuBIT,MAAKG;;AAvBlB,AAAA,gBAAA,ZAuBaH;AAvBb,AAuBqB,CAAMoB,cAAK,AAACI,gBAAKrB;;AAAIH;;;AAvB1C,CAAA,AAAA,sFAAA,tFAASS,iGAsBIY;;AAtBb,AAAA,YAAA,RAsBaA;AAtBb,AAsBgBD;;;AAtBhB,CAAA,AAAA,sFAAA,tFAASX,iGAmBIY,EAAEE;;AAnBf,AAAA,YAAA,RAmBaF;AAnBb,AAmBkB,QAAMJ,cAAKM;;;AAnB7B,CAAA,AAAA,wFAAA,xFAASd,mGAcMY;;AAdf,AAAA,YAAA,RAceA;AAdf,AAckBR;;;AAdlB,CAAA,AAAA,uFAAA,vFAASJ,kGAgBKY;;AAhBd,AAAA,YAAA,RAgBcA;AAhBd,AAgBiBN;;;AAhBjB,CAAA,AAAA,sFAAA,tFAASN,iGAiBIY;;AAjBb,AAAA,YAAA,RAiBaA;AAjBb,AAiBgBL;;;AAjBhB,CAAA,AAAA,sFAAA,tFAASP,iGAWIY;;AAXb,AAAA,YAAA,RAWaA;AAXb,AAWgBV;;;AAXhB,CAAA,AAAA,uFAAA,vFAASF,kGAaKY;;AAbd,AAAA,YAAA,RAacA;AAbd,AAaiBT;;;AAbjB,CAAA,AAAA,sFAAA,tFAASH,iGAkBIY;;AAlBb,AAAA,YAAA,RAkBaA;AAlBb,AAkBgBJ;;;AAlBhB,CAAA,AAAA,0FAAA,1FAASR,qGAeQY;;AAfjB,AAAA,YAAA,RAeiBA;AAfjB,AAeoBP;;;AAfpB,CAAA,AAAA,uFAAA,vFAASL,kGAqBKT,MAAKE;;AArBnB,AAAA,gBAAA,ZAqBcF;AArBd,AAqBsB,CAAMmB,eAAM,AAACK,gBAAKtB;;AAAIF;;;AArB5C,CAAA,AAAA,uFAAA,vFAASS,kGAoBKY;;AApBd,AAAA,YAAA,RAoBcA;AApBd,AAoBiBF;;;AApBjB,CAAA,AAAA,uFAAA,vFAASV,kGAwBKY,EAAEpB;;AAxBhB,AAAA,YAAA,RAwBcoB;AAxBd,AAyBI,CAAMP,kBAAS,AAACW,8CAAMX,gBAAS,AAAClC,+BAAQqB,MAAMA;;AAC9C,oBAAMe;AAAN,AAAW,AAAC1B,gCAAS0B,YAAKf;;AAA1B;;AACA,oBAAUc;AAAV;AAAA,AAAgB,CAAMA,eAAMd;;;AAC5B,CAAMe,cAAKf;;AACXA;;;AA7BJ,CAAA,uCAAA,vCAASQ;AAAT,AAAA,AAAA;;;AAAA,CAAA,6CAAA,7CAASA;;AAAT,CAAA,gDAAA,hDAASA;;AAAT,CAAA,qDAAA,WAAAJ,mBAAAC,qBAAAC,xGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;mCAAA,nCAASI,8EAAwBC,KAClBC,MACAC,OACyBC,SACAC,MACAC,KACAC,KACAC,MACMC,MACAC;AAT9C,AAAA,YAAAX,4BAAiCE,KAClBC,MACAC,OACyBC,SACAC,MACAC,KACAC,KACAC,MACMC,MACAC;;;AATrCX,AAwCT,qCAAA,rCAAiBiB,kFAAQP,MAAMR,KAAKgB,KAAKd;AAAzC,AAAA;;AAEA;;;8CAAA,9CAAOe,oGAEJT,MAAMR,KAAKgB,KAAKd;AAFnB,AAGE,OAACgB,oBACA,WAAKR,EAAES,EAAEC;AAAT,AACE,IAAAC,WAAQb;IAARc,WAAc,AAACG,6CAAKzB,KAAKmB;IAAzBI,WAA4BH;IAA5BI,WAA8BtB;AAA9B,AAAA,4IAAAmB,SAAAC,SAAAC,SAAAC,yDAAAH,SAAAC,SAAAC,SAAAC,nPAACT,mEAAAA,wGAAAA;GAFJ,KAICC;;AAEH;;;sCAAA,tCAAOU,oFAEJlB,MAAMR,KAAKgB,KAAKd;AAFnB,AAGE,IAAAyB,aAAA,AAAAC,cAAUZ;IAAVa,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,QAAA,AAAAD,kDAAAE,tDAAQS;AAAR,AAAA,AACE,IAAAC,iBAAQjC;IAARkC,iBAAc,AAACjB,6CAAKzB,KAAKwC;IAAzBG,iBAA4BH;IAA5BI,iBAA8B1C;AAA9B,AAAA,qIAAAuC,eAAAC,eAAAC,eAAAC,+DAAAH,eAAAC,eAAAC,eAAAC,7RAAC7B,mEAAAA,gIAAAA;;AADH;AAAA,eAAAY;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,QAAA,AAAAI,gBAAAX,pBAAQa;AAAR,AAAA,AACE,IAAAK,iBAAQrC;IAARsC,iBAAc,AAACrB,6CAAKzB,KAAKwC;IAAzBO,iBAA4BP;IAA5BQ,iBAA8B9C;AAA9B,AAAA,qIAAA2C,eAAAC,eAAAC,eAAAC,+DAAAH,eAAAC,eAAAC,eAAAC,7RAACjC,mEAAAA,gIAAAA;;AADH;AAAA,eAAA,AAAAwB,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAGF;;;uCAAA,vCAAOsB,sFAEJzC,MAAMR,KAAKgB,KAAKd;AAFnB,AAGE,OAACgD,+CACA,WAAKC,EAAEX;AAAP,AACE,IAAAY,iBAAQ5C;IAAR6C,iBAAc,AAAC5B,6CAAKzB,KAAKmD;IAAzBG,iBAA4Bd;IAA5Be,iBAA8BrD;AAA9B,AAAA,qIAAAkD,eAAAC,eAAAC,eAAAC,+DAAAH,eAAAC,eAAAC,eAAAC,7RAACxC,mEAAAA,gIAAAA;;AACD,YAAA,JAAWoC;GAHd,IAKCnC;;AAEH;;;mCAAA,nCAAOwC,8EAEJhD,MAAYC;AAFf,AAGE,OAAAgD,8BAAA,NAAQjD,MAAM,WAAKjB;AAAL,AAAQ,QAAGkB,OAAWlB;GAApC,AAAAmE,iBAAQlD;;AAEV,0CAAA,1CAAOmD,4FACJC,KAAKpD,MAAMR,KAAKgB,KAAKd;AADxB,AAEE,IAAMZ,OAAK,kDAAA,mCAAA,KAAA,KAAA,KAAA,IAAA,IAAA,5GAACS,iCAAOC,KAAKgB,KAAKd;AAA7B,AACE,AAACnC,iCAAUmC,OAAOZ;;AAClB,IAAAuE,iBAAMD;IAANC,qBAAA,EAAA,CAAAA,0BAAAC,oBAAA,AAAAD,mBAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;AACc,AAAC5C,4CAAqBT,MAAMR,KAAKgB,KAAK1B;;;KADpD;AAEc,AAACoC,oCAAalB,MAAMR,KAAKgB,KAAK1B;;;KAF5C;AAGc,AAAC2D,qCAAczC,MAAMR,KAAKgB,KAAK1B;;;;AAH7C,MAAA,KAAAyE,MAAA,CAAA,mEAAAF;;;;AAIA,IAAYG,sKAAQ,AAAc1E,fAAM2E,5EAAK,4EAAA,5EAACC,4CAAIjF,5GAAU,AAACiE,+CAAOiB;IAC9D1D,aAAS,CAAG,AAAUnB,2DAAM0E;AADlC,AAEE,IAAAI,iBAAM9E;AAAN,AAAA,AAAA8E,mEAAA,AAAAC,gBACc7D;;AADd,AAAA4D,kEAEY3D;;AAFZ2D;AAGA,AAACZ,iCAAUhD,MAAMC;;AACnBnB;;AAEJ,qCAAA,rCAAOgF,kFACJ9D,MAAMR,KAAKgB,KAAKd;AADnB,AAEE,IAAMZ,OAAK,kDAAA,KAAA,KAAA,KAAA,KAAA,IAAA,AAAA+E,uBAAA,jGAACtE,iCAAOC,KAAKgB,KAAKd,+CAA0BM;AAAvD,AACE,AAACzC,iCAAUmC,OAAOZ;;AAClB,uCAAA,vCAACkE,iCAAUhD;;AACXlB;;AAEJ,qCAAA,rCAAOyB,kFACJP,MAAMR,KAAKgB,KAAKd;AADnB,AAEE,IAAM0D,OAAK,AAACW,yBAAWvD;AAAvB,AACE,GAAI,EAAI,kDAAA,lDAACwD,6CAAEZ,6DAAW,kDAAA,lDAACY,6CAAEZ;AACvB,OAACU,mCAAY9D,MAAMR,KAAKgB,KAAKd;;AAC7B,OAACyD,wCAAiBC,KAAKpD,MAAMR,KAAKgB,KAAKd;;;AAE7C;;;;;+BAAA,/BAAOuE,sEAIJzD;AAJH,AAKE,IAAMR,QAAM,yBAAA,zBAACkE;AAAb,AACE,gDAAA,zCAAC3D,mCAAOP,uCAASQ,KAAK,iCAAA,iCAAA,iGAAA,KAAA,mCAAA,KAAA,KAAA,KAAA,IAAA,KAAA,nOAACjB;;AAI3B,oCAAA,pCAAO4E,gFACJC,EAAEC;AADL,AAEE,OAACC,+BAAW,AAAC/F,iCAAU6F,GAAG,AAAC7F,iCAAU8F;;AAmBpC,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,uEAAA,vEAASE,kFAGCrE;;AAHV,AAAA,YAAA,RAGUA;AAHV,AAGa,OAACiE,kCAAWC,SAAEC;;;AAH3B,CAAA,AAAA,yEAAA,zEAASE,oFAME1F,MAAK4F;;AANhB,AAAA,gBAAA,ZAMW5F;AANX,AAOI,OAACmF,6CAAE,AAAOnF,8CAAM,AAAC6F,gBAAMD;;;AAP3B,CAAA,AAAA,gFAAA,hFAASF,2FAUI1F,MAAK4F;;AAVlB,AAAA,gBAAA,ZAUa5F;AAVb,AAWI,QAAG,AAAOA,gDAAM,AAAC6F,gBAAMD;;;AAX3B,CAAA,wCAAA,xCAASF;AAAT,AAAA,AAAA;;;AAAA,CAAA,8CAAA,9CAASA;;AAAT,CAAA,iDAAA,jDAASA;;AAAT,CAAA,sDAAA,WAAArF,mBAAAC,qBAAAC,zGAASmF;AAAT,AAAA,OAAAlF,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAASqF,gFAAaJ,EACAC;AADtB,AAAA,YAAAE,6BAAsBH,EACAC;;;AADbE,AAaZ,mCAAA,nCAAOI,8EACGC;AADV,AAAA,0FAEG,AAAKA,QAAO,AAAKA;;AAEpB,AAAA;AAAA;;;+BAAA,/BAAaO;;AAAb,IAAAN,kDAAA,WACahG;AADb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBACaiC,qBAAAA;IADbhC,kBAAA,CAAAiI,gCAAA,AAAA/H,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACagC,mCAAAA;;AADb,IAAA7B,kBAAA,CAAA8H,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAA9H,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACa6B,mCAAAA;;AADb,MAAA,AAAA5B,2BAAA,iBACa4B;;;;AADb,AAAA;;;kCAAA,lCACGiG,4EAAUjG;AADb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFACaA,0BAAAA;AADb,OACaA,oDAAAA;;AADb,OAAAgG,gDACahG;;;;AADb,IAAAkG,iDAAA,WAEYlG;AAFZ,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAEYiC,qBAAAA;IAFZhC,kBAAA,CAAAmI,+BAAA,AAAAjI,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAEYgC,mCAAAA;;AAFZ,IAAA7B,kBAAA,CAAAgI,+BAAA;AAAA,AAAA,GAAA,GAAA,CAAAhI,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAEY6B,mCAAAA;;AAFZ,MAAA,AAAA5B,2BAAA,gBAEY4B;;;;AAFZ,AAAA;;;iCAAA,jCAEGmG,0EAASnG;AAFZ,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,sDAAA,hFAEYA,0BAAAA;AAFZ,OAEYA,mDAAAA;;AAFZ,OAAAkG,+CAEYlG;;;;AAFZ,IAAAoG,kDAAA,WAGapG;AAHb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAGaiC,qBAAAA;IAHbhC,kBAAA,CAAAqI,gCAAA,AAAAnI,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAGagC,mCAAAA;;AAHb,IAAA7B,kBAAA,CAAAkI,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAlI,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAGa6B,mCAAAA;;AAHb,MAAA,AAAA5B,2BAAA,iBAGa4B;;;;AAHb,AAAA;;;kCAAA,lCAGGqG,4EAAUrG;AAHb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,uDAAA,jFAGaA,0BAAAA;AAHb,OAGaA,oDAAAA;;AAHb,OAAAoG,gDAGapG;;;;AAHb,AAKA,AAAA;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,sEAAAI,tEAASmG;;AAAT,CAAA,AAAA,sFAAA,tFAASA,iGAIIlF;;AAJb,AAAA,YAAA,RAIaA;AAJb,AAIgBoF;;;AAJhB,CAAA,AAAA,qFAAA,rFAASF,gGAKGlF;;AALZ,AAAA,YAAA,RAKYA;AALZ,AAKeqF;;;AALf,CAAA,AAAA,sFAAA,tFAASH,iGAMIlF;;AANb,AAAA,YAAA,RAMaA;AANb,AAMgBsF;;;AANhB,CAAA,uCAAA,vCAASJ;AAAT,AAAA,AAAA;;;AAAA,CAAA,6CAAA,7CAASA;;AAAT,CAAA,gDAAA,hDAASA;;AAAT,CAAA,qDAAA,WAAAlG,mBAAAC,qBAAAC,xGAASgG;AAAT,AAAA,OAAA/F,iBAAAF,qBAAA;;;AAAA;;;mCAAA,nCAASkG,8EAAeC,GACFC,IACAC;AAFtB,AAAA,YAAAJ,4BAAwBE,GACFC,IACAC;;;AAFbJ,AAgBT,kCAAA,lCAAOK,4EACJC;AADH,AAEE,OAAC,AAACC,6CAAKb,gCAASE,+BAAQE,iCAAUQ;;AAEpC,AAAA;AAAA;;;gCAAA,hCAAac;;AAAb,IAAAZ,mDAAA,WACa/G;AADb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBACaiC,qBAAAA;IADbhC,kBAAA,CAAAgJ,gCAAA,AAAA9I,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACagC,mCAAAA;;AADb,IAAA7B,kBAAA,CAAA6I,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAA7I,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACa6B,mCAAAA;;AADb,MAAA,AAAA5B,2BAAA,kBACa4B;;;;AADb,AAAA;;;kCAAA,lCACGgH,4EAAUhH;AADb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFACaA,0BAAAA;AADb,OACaA,qDAAAA;;AADb,OAAA+G,iDACa/G;;;;AADb,IAAAiH,mDAAA,WAEajH,MAAK4H;AAFlB,AAAA,IAAA7J,kBAAA,EAAA,UAAA,OAAA,hBAEaiC,qBAAAA;IAFbhC,kBAAA,CAAAkJ,gCAAA,AAAAhJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAEagC,wCAAAA,lCAAK4H,wCAAAA;;AAFlB,IAAAzJ,kBAAA,CAAA+I,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAA/I,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAEa6B,wCAAAA,lCAAK4H,wCAAAA;;AAFlB,MAAA,AAAAxJ,2BAAA,kBAEa4B;;;;AAFb,AAAA;;;kCAAA,lCAEGkH,4EAAUlH,MAAK4H;AAFlB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAEa5H,0BAAAA;AAFb,OAEaA,qDAAAA,MAAK4H;;AAFlB,OAAAX,iDAEajH,MAAK4H;;;;AAFlB,IAAAT,mDAAA,WAGanH;AAHb,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAGaiC,qBAAAA;IAHbhC,kBAAA,CAAAoJ,gCAAA,AAAAlJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAGagC,mCAAAA;;AAHb,IAAA7B,kBAAA,CAAAiJ,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAjJ,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAGa6B,mCAAAA;;AAHb,MAAA,AAAA5B,2BAAA,kBAGa4B;;;;AAHb,AAAA;;;kCAAA,lCAGGoH,4EAAUpH;AAHb,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAGaA,0BAAAA;AAHb,OAGaA,qDAAAA;;AAHb,OAAAmH,iDAGanH;;;;AAHb,IAAAqH,mDAAA,WAIarH,MAAK6H;AAJlB,AAAA,IAAA9J,kBAAA,EAAA,UAAA,OAAA,hBAIaiC,qBAAAA;IAJbhC,kBAAA,CAAAsJ,gCAAA,AAAApJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAIagC,wCAAAA,lCAAK6H,wCAAAA;;AAJlB,IAAA1J,kBAAA,CAAAmJ,gCAAA;AAAA,AAAA,GAAA,GAAA,CAAAnJ,mBAAA;AAAA,QAAAA,gDAAAA,4DAAAA,dAIa6B,wCAAAA,lCAAK6H,wCAAAA;;AAJlB,MAAA,AAAAzJ,2BAAA,kBAIa4B;;;;AAJb,AAAA;;;kCAAA,lCAIGsH,4EAAUtH,MAAK6H;AAJlB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,wDAAA,lFAIa7H,0BAAAA;AAJb,OAIaA,qDAAAA,MAAK6H;;AAJlB,OAAAR,iDAIarH,MAAK6H;;;;AAJlB,IAAAN,gDAAA,WAKUvH;AALV,AAAA,IAAAjC,kBAAA,EAAA,UAAA,OAAA,hBAKUiC,qBAAAA;IALVhC,kBAAA,CAAAwJ,6BAAA,AAAAtJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAKUgC,mCAAAA;;AALV,IAAA7B,kBAAA,CAAAqJ,6BAAA;AAAA,AAAA,GAAA,GAAA,CAAArJ,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAKU6B,mCAAAA;;AALV,MAAA,AAAA5B,2BAAA,eAKU4B;;;;AALV,AAAA;;;+BAAA,/BAKGwH,sEAAOxH;AALV,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,qDAAA,/EAKUA,0BAAAA;AALV,OAKUA,kDAAAA;;AALV,OAAAuH,8CAKUvH;;;;AALV,IAAAyH,gDAAA,WAMUzH,MAAK8H;AANf,AAAA,IAAA/J,kBAAA,EAAA,UAAA,OAAA,hBAMUiC,qBAAAA;IANVhC,kBAAA,CAAA0J,6BAAA,AAAAxJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAMUgC,qCAAAA,/BAAK8H,qCAAAA;;AANf,IAAA3J,kBAAA,CAAAuJ,6BAAA;AAAA,AAAA,GAAA,GAAA,CAAAvJ,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAMU6B,qCAAAA,/BAAK8H,qCAAAA;;AANf,MAAA,AAAA1J,2BAAA,eAMU4B;;;;AANV,AAAA;;;+BAAA,/BAMG0H,sEAAO1H,MAAK8H;AANf,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,qDAAA,/EAMU9H,0BAAAA;AANV,OAMUA,kDAAAA,MAAK8H;;AANf,OAAAL,8CAMUzH,MAAK8H;;;;AANf,AAQA,AAAA;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,wEAAA1H,xEAAS2H;;AAAT,CAAA,AAAA,wFAAA,xFAASA,mGAII1G;;AAJb,AAAA,YAAA,RAIaA;AAJb,AAIgBuG;;;AAJhB,CAAA,AAAA,wFAAA,xFAASG,mGAKI/H,MAAKiI;;AALlB,AAAA,gBAAA,ZAKajI;AALb,AAKqB,CAAM4H,cAAKK;;AAAGjI;;;AALnC,CAAA,AAAA,wFAAA,xFAAS+H,mGAMI1G;;AANb,AAAA,YAAA,RAMaA;AANb,AAMgBwG;;;AANhB,CAAA,AAAA,wFAAA,xFAASE,mGAOI/H,MAAKE;;AAPlB,AAAA,gBAAA,ZAOaF;AAPb,AAOqB,CAAM6H,cAAK3H;;AAAGF;;;AAPnC,CAAA,AAAA,qFAAA,rFAAS+H,gGAQC1G;;AARV,AAAA,YAAA,RAQUA;AARV,AAQayG;;;AARb,CAAA,AAAA,qFAAA,rFAASC,gGASC/H,MAAKkI;;AATf,AAAA,gBAAA,ZASUlI;AATV,AASoB,CAAM8H,WAAEI;;AAAKlI;;;AATjC,CAAA,wCAAA,xCAAS+H;AAAT,AAAA,AAAA;;;AAAA,CAAA,8CAAA,9CAASA;;AAAT,CAAA,iDAAA,jDAASA;;AAAT,CAAA,sDAAA,WAAA1H,mBAAAC,qBAAAC,zGAASwH;AAAT,AAAA,OAAAvH,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAAS0H,gFAAgCJ,KACAC,KACAC;AAFzC,AAAA,YAAAC,6BAAyCH,KACAC,KACAC;;;AAFhCC,AAWT,mCAAA,nCAAOI,8EACJC;AADH,AAEE,OAAC,AAACtB,6CAAKE,gCAASI,gCAASI,8BAAOY;;AAElC,kCAAA,lCAAOC,4EACJP,EAAEpB;AADL,AAEE,OAAC4B,4CAAIR,EAAEpB,IACa,AAAC6B;;AAEvB,oCAAA,pCAAiBC,gFAAOC,GAAGC,GAAGd;AAA9B,AAAA;;AAEA,sCAAA,tCAAOe,oFACGjC,IAAIkB,KAAKE,EAAErB;AADrB,AAEE,IAAYmC,KAAG,AAACP,gCAASP,EAAEpB;AAA3B,AACE,IAAAmC,WAAMpC;IAANoC,eAAA,EAAA,CAAAA,oBAAApE,oBAAA,AAAAoE,aAAA;AAAA,AAAA,QAAAA;KAAA;AACUD;;;KADV;AAGU,aAAA,LAAKA;;;KAHf;KAAA;AAKU,IAAME,KAAG,AAAClJ,gCAAS,AAAK8G;AAAxB,AACE,QAAGkC,KAAG,MAAA,LAAWE;;;KAN7B;AAOU,QAAGF,KAAG,iBAAAG,WAAa,AAAKrC;IAAlBsC,WAAuB,AAAKtC;IAA5BuC,WAAiCrB;AAAjC,AAAA,0IAAAmB,SAAAC,SAAAC,wDAAAF,SAAAC,SAAAC,9NAAOT,kEAAAA,8FAAAA;;;;;AAPvB,MAAA,KAAA9D,MAAA,CAAA,mEAAAmE;;;;AASJ;;;;;;;mCAAA,wDAAAK,3FAAOG,8EAME9E,KAAKmC,IAAI4C;AANlB,AAAA,IAAAH,aAAAD;SAAA,AAAAE,4CAAAD,WAAA,IAAA,hEAMuBI;SANvB,AAAAH,4CAAAD,WAAA,IAAA,hEAM0BK;AAN1B,AAOE,IAAAC,WAAMlF;IAANkF,eAAA,EAAA,CAAAA,oBAAAhF,oBAAA,AAAAgF,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;AAAA;;;KAAA;KAAA;AAEc,IAAAC,aAAc,AAAC5D,iCAAUY;SAAzB,AAAA0C,4CAAAM,WAAA,IAAA,hEAAOE;SAAP,AAAAR,4CAAAM,WAAA,IAAA,hEAAUG;IAAVF,aACc,AAAC7D,iCAAUwD;SADzB,AAAAF,4CAAAO,WAAA,IAAA,hEACOlB;SADP,AAAAW,4CAAAO,WAAA,IAAA,hEACUjB;IACJvF,IAAQ,EAAI,CAAYsF,OAAGmB,KAAIL,GAAG,AAAC7J,iCAAUkK;IAC7CE,IAAQ,EAAI,CAAYpB,OAAGmB,KAAIL,GAAG,AAAC9J,iCAAUmK;IAC7CE,KAAQ,CAASP,KAASM;IAC1BE,KAAQ,CAAST,KAASpG;AALhC,AAME,GACE,QAAA,PAAI6G;AAAMD;;AADZ,GAEE,QAAA,PAAIA;AAFN;;AAAA,GAGE,CAAGC,KAAGD;AAHR;;AAAA,GAIE,CAAGC,KAAGD;AAAI,QAAGA,KAAGC;;AAJlB,AAAA;;;;;;;;;AARhB,MAAA,KAAAtF,MAAA,CAAA,mEAAA+E;;;;AAeF,iCAAA,jCAAOQ,0EACJ1F,KAAK+E,IAAI1B,KAAKsC,KAAK9B,MAAMvB;AAD5B,AAEE,IAAAsD,aAAqB,AAAChC,iCAAUC;wBAAhC,AAAAgB,4CAAAe,WAAA,IAAA,/EAAOE;WAAP,AAAAjB,4CAAAe,WAAA,IAAA,lEAAatC;QAAb,AAAAuB,4CAAAe,WAAA,IAAA,/DAAkBrC;IAAlBsC,aACqB,AAACxD,gCAASC;SAD/B,AAAAuC,4CAAAgB,WAAA,IAAA,hEACO3D;UADP,AAAA2C,4CAAAgB,WAAA,IAAA,jEACU1D;UADV,AAAA0C,4CAAAgB,WAAA,IAAA,jEACczD;IACR2D,QAAe,AAAC3B,oCAAajC,IAAIkB,KAAKE,EAAErB;AAF9C,AAGE,GAAI,CAAU6D,SAAM,AAAOjC,gCAASP,EAAEnB;AACpCyB;;AACA,IAAAmC,WAAMnC;AAAN,AAAA,gCAAAmC,hCACGrD,yCAAS,0EAAA,1EAACsD,oDAAOH,kBAAM1D,uFAAKD,IAAID;;AADnC,gCAAA8D,hCAEGjD,yCAAS,AAAC7F,8CAAMoG,KAAKlB,IACL,CAAS2D,QAAM,AAAOjB,iCAAU9E,KAAKoC,IAAI2C,IAAIY;;AAHhE,6BAAAK,7BAIG7C,sCAAM,AAAC8C,oDAAO1C,EAAEnB,IAAI2D;;AAJvBC;;;AAMN,mCAAA,nCAAOE,8EACJb,GAAGnB;AADN,AAEE,IAAAiC,mBAAI,AAACtL,gCAASwK;AAAd,AAAA,oBAAAc;AAAAA;;AAAkBjC;;;AAEpB,sCAAA,tCAAOkC,oFACJrB,IAAI5C;AADP,AAEE,IAAAkE,aAAc,AAAC9E,iCAAUwD;SAAzB,AAAAF,4CAAAwB,WAAA,IAAA,hEAAOnC;SAAP,AAAAW,4CAAAwB,WAAA,IAAA,hEAAUlC;IAAVmC,aACc,AAAC/E,iCAAUY;SADzB,AAAA0C,4CAAAyB,WAAA,IAAA,hEACOjB;SADP,AAAAR,4CAAAyB,WAAA,IAAA,hEACUhB;IACJiB,SAAQ,AAAC3F,6CAAE,AAAC7G,iCAAUsL,IAAI,AAACtL,iCAAUuL;IACrCkB,UAAQ,CAAYnB,OAAGnB;IACvBuC,UAAQ,GAAKD;IACbE,UAAQ,GAAK,CAAYpB,OAAGnB;IAC5BwC,kBAAQ,AAACT,iCAAUb,GAAGnB;IACtB0C,kBAAQ,AAACV,iCAAUZ,GAAGnB;AAP5B,AAQE,GAAI,eAAA,bAAKsC,eAAKC,aAAKH;AAAnB,0FACG,iCAAA,jCAACtE,gFAAUE,IAAI,AAACf,kCAAQuF,gBAAIC;;AAC7B,IAAAC,WAAA;IAAAA,eAAA,8MAAAA,5MACEJ,SAAgB,6CAAAI,7CAAChJ,sDAAK,iCAAA,jCAACoE,iFAAUE,IAAI,AAACf,kCAAQuF,gBAAIrB;IADpDuB,eAAA,+OAAAA,7OAEE,EAAKJ,aAAKC,WAAM,6CAAAG,7CAAChJ,0DAAK,iCAAA,jCAACoE,gFAAUE,IAAI,AAACf,kCAAQuF,gBAAIC;IAFpDC,eAAA,mOAAAA,jOAGE,EAAKL,aAAKE,WAAM,6CAAAG,7CAAChJ,0DAAK,iCAAA,jCAACoE,iFAAUE,IAAI,AAACf,kCAAQiE,GAAGuB;AAHnD,AAAA,GAIE,EAAKH,aAAKC;AAAM,oDAAAG,7CAAChJ,0DAAK,iCAAA,jCAACoE,iFAAUE,IAAI,AAACf,kCAAQiE,GAAGuB;;AAJnDC;;;;AAMN,sCAAA,tCAAOC,oFACGC,KAAKhC,IAAI5C;AADnB,AAEE,IAAA6E,aAAc,AAACzF,iCAAUwD;SAAzB,AAAAF,4CAAAmC,WAAA,IAAA,hEAAO9C;SAAP,AAAAW,4CAAAmC,WAAA,IAAA,hEAAU7C;IAAV8C,aACc,AAAC1F,iCAAUY;SADzB,AAAA0C,4CAAAoC,WAAA,IAAA,hEACO5B;SADP,AAAAR,4CAAAoC,WAAA,IAAA,hEACU3B;IACJ4B,KAAQ,AAAC7M,+BAAQgL;IACjB8B,KAAQ,AAAC9M,+BAAQiL;AAHvB,AAIE,GAAI,CAAYD,OAAGnB;AAAnB,0FAEG,AAACjC,iCAAO,sEAAA,+CAAA,nHAAI,AAACmF,0BAAU,AAACrN,iCAAUmK,IAAIiD,qGAC9BhF,IAAI,AAACf,kCAAQ8C,GAAG,AAACgC,iCAAUZ,GAAGnB;;AACvC,IAAMkD,KAAI,AAACtN,iCAAUsL;IACfiC,KAAI,AAACvN,iCAAUuL;IACfiC,KAAI,AAACxN,iCAAUoK;IACfwC,kBAAI,AAACT,iCAAUb,GAAGnB;IAClBsD,KAAI,AAACvN,oCAAakK;AAJxB,AAKE,GAAI,CAAYwC,oBAAIzC;AAElB,IAAMuD,SAAO,AAACrG,kCAAQ8C,GAAG,AAAK6C;IACxBW,OAAO,AAACtG,kCAAQiE,GAAG,CAACmC,mCAAAA,uCAAAA,NAAGN,mBAAAA;AAD7B,AAEE,GAAI,AAACE,0BAAUG,GAAGL;AAChB,GAAI,AAACtG,6CAAEsG,GAAGC;AAAV,0FACG,AAAClF,iCAAO,uDAAA,+CAAA,pGAAI,AAACrB,6CAAEyG,GAAGC,oGAAWnF,IAAIsF;;AADpC,0FAEG,iCAAA,jCAACxF,gFAAUE,IAAIuF,MACf,iCAAA,jCAACzF,gFAAUyF,KAAKD;;;AAJrB,0FAKG,iCAAA,jCAACxF,iFAAUE,IAAIsF;;;AATtB,0FAWG,EAAI,AAACL,0BAAUG,GAAGL,KAChB,EAAI,AAACtG,6CAAEsG,GAAGC,KACR,AAAClF,iCAAO,uDAAA,+CAAA,pGAAI,AAACrB,6CAAEyG,GAAGC,oGACVnF,IAAI,AAACf,kCAAQuF,gBAAI,iBAAAR,mBAAI,iBAAAwB,WAAI,AAACtN,+BAAQsM;AAAb,AAAA,4EAAAgB,yBAAAA,7FAACH,mCAAAA,6CAAAA;;AAAL,AAAA,oBAAArB;AAAAA;;AAAuBb;;OAChD,iCAAA,jCAACrD,gFAAUE,IAAI,AAACf,kCAAQiE,GAAG,CAACmC,mCAAAA,uCAAAA,NAAGN,mBAAAA,QACjC,iCAAA,jCAACjF,iFAAUE,IAAI,AAACf,kCAAQuF,gBAAIrB;;;;AAEzC,kCAAA,lCAAOsC,4EACJ5H,KAAK+G,KAAKhC,IAAI5C;AADjB,AAEE,IAAA0F,WAAM7H;IAAN6H,eAAA,EAAA,CAAAA,oBAAA3H,oBAAA,AAAA2H,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;AACc,OAACzB,oCAAarB,IAAI5C;;;KADhC;KAAA;AAEc,OAAC2E,oCAAaC,KAAKhC,IAAI5C;;;;AAFrC,MAAA,KAAAhC,MAAA,CAAA,mEAAA0H;;;;AAIF,iCAAA,jCAAOC,0EACE9H,KAAKkE,GAAGC,GAAGd;AADpB,AAEE,IAAM0B,MAAK,AAAC3D,kCAAQ8C,GAAGC;IACjB4C,OAAK,AAAC3F,kCAAQ,AAAC3G,iCAAUyJ,IAAI,AAACzJ,iCAAU0J;WAD9C,PAEMwB,0FAAM,AAACxK,iCAAU+I,IAAI,AAAC/I,iCAAUgJ;AAFtC,AAGE,IAAON,QAAM,AAACJ,kCAAQ,qBAAA,rBAACsE,yDACD,AAACC,4HAAgBjB,KAAK,AAACjC,iCAAU9E,KAAK+G,KAAKhC,IAAIY,YAC/C,qBAAA,qDAAA,1EAACoC,qEAAWhB;;AAFlC,AAGE,IAAAkB,aAAqB,AAACrE,iCAAUC;wBAAhC,AAAAgB,4CAAAoD,WAAA,IAAA,/EAAOnC;WAAP,AAAAjB,4CAAAoD,WAAA,IAAA,lEAAa3E;QAAb,AAAAuB,4CAAAoD,WAAA,IAAA,/DAAkBnL;AAAlB,AACE,GAAI,AAACoL,uBAAO5E;AACV,MAAO,gDAAA,mCAAA,2CAAA,oDAAA,lLAAC6E,+KAAgDjE,oDAAOC;;AAC/D,IAAAiE,aAAiB,AAACrL,eAAKuG;UAAvB,AAAAuB,4CAAAuD,WAAA,IAAA,jEAAOjG;WAAP,AAAA0C,4CAAAuD,WAAA,IAAA,lEAAWC;AAAX,AACE,GAAI,AAACzH,6CAAEuB,IAAI4C;AACT,AAAI,AAAAlF,6BAAA,8CAAA,AAAAC,nDAAQuD,oEAAAA,/DAAKnG,qEAAM6H,IAAI,AAACuD,2BAAYxC;;AACpCuC;;AACJ,eAAO,AAAC/I,+CACA,AAACiJ,uDAAQ7C,+BAAQ1F,KAAK+E,IAAI1B,uDAAKsC,WAC/B,AAAC5C,gCAASc,MAAM,AAAC2E,cAAIlF,OACrB,AAACsE,gCAAS5H,KAAK+G,KAAKhC,IAAI5C;;;;;;;;AAE9C,gCAAA,hCAAOsG,wEACJ/M;AADH,AAEE,IAAM8B,IAAE,AAACzD,iCAAU2B;AAAnB,AACE,GAAI,6CAAA,7CAACkF,gGAAO,AAACD,yBAAWnD;AACtBA;;AACA,OAACkL,cAAIlL;;;AAEX,mCAAA,nCAAOmL,8EACEzE,GAAGC,GAAGd;AADf,AAEE,IAAAuF,WAAkB,AAACQ,iCAAa,AAACX,8BAAOvE,IAAI,AAACuE,8BAAOtE;IAApD0E,aAAAD;IAAAE,aAAA,AAAA9K,cAAA6K;IAAAE,eAAA,AAAArK,gBAAAoK;IAAAA,iBAAA,AAAAnK,eAAAmK;SAAAC,LAAQ7G;UAAR4G,NAAaK;IACN9D,KAAW,AAAC5K,iCAAUyJ;IACtBoB,KAAW,AAAC7K,iCAAU0J;IACtBkF,IAAW,qBAAA,rBAACtB;WAHnB,PAIOM;AAJP,AAAA,IAAAO,eAAAA;IACOvD,SAAAA;IACAC,SAAAA;IACA+D,QAAAA;IACAhB,WAAAA;;AAJP,AAAA,IAAAW,aAAAJ;IAAAK,aAAA,AAAAjL,cAAAgL;IAAAE,eAAA,AAAAxK,gBAAAuK;IAAAA,iBAAA,AAAAtK,eAAAsK;aAAAC,TAAQhH;cAAR+G,VAAaE;IACN9D,SAAAA;IACAC,SAAAA;IACA+D,QAAAA;IACAhB,WAAAA;AAJP,AAKE,oBAAInG;AACF,IAAMyE,kBAAI,AAACT,iCAAUb,OAAGnB;IAClB0C,kBAAI,AAACV,iCAAUZ,OAAGnB;IAClBhC,MAAI,AAACf,kCAAQiE,OAAGC;IAChBf,KAAI,AAAClJ,gCAASiK;AAHpB,AAIE,GAAI,AAACgE,yBAASpH;AACZ,eAAO,kBAAA,AAAAwG,cAAA,AAAAa,iDAAA,AAAAvL,cAAA,AAAAwL,+CAAA,KAAAC,eAAA,oBAAA,KAAA,IAAA,7LAAI,UAAA,TAASvH,oKAAS,UAAA,TAAWA,8BAAMiH,YAAKA;eAC5CxC;eAAIC;eACJ,6HAAA,uFAAA,pNAACX,oDAAOoD,MAAE,AAACjI,kCAAQuF,gBAAIC,oGAAMzE;eAC7B,AAAClF,gBAAKoL;;;;;;;;AACb,IAAAqB,WAAMxH;IAANwH,eAAA,EAAA,CAAAA,oBAAAxJ,oBAAA,AAAAwJ,aAAA;AAAA,AAAA,QAAAA;KAAA;AACK,eAAOP;eAAIxC;eAAIrB;eACR,oHAAA,pHAACW,oDAAOoD,MAAE,AAACjI,kCAAQuF,gBAAIrB,2FAAKnD,IAAID;eAChC,6BAAA,5BAAK,AAACjF,gBAAKoL;;;;;;;;;KAHvB;AAIK,eAAOc;eAAI9D;eAAGuB;eACP,oHAAA,pHAACX,oDAAOoD,MAAE,AAACjI,kCAAQiE,OAAGuB,oGACbzE,IAAI,mBAAA,gDAAA,jEAAI,CAAYkD,WAAGnB;eAChC,CAAA,6BAAA,5BAAG,AAACjH,gBAAKoL,mBAAQ,AAACpL,gBAAKsH;;;;;;;;;KAPnC;AAQK,eAAO4E;eAAIxC;eAAIC;eACR,6HAAA,7HAACX,oDAAOoD,MAAE,AAACjI,kCAAQuF,gBAAIC,oGAAMzE,IAAID;eACjC,CAAA,6BAAA,5BAAG,AAACjF,gBAAKoL,mBAAQ,AAACpL,gBAAKsH;;;;;;;;;;AAVnC,MAAA,KAAApE,MAAA,CAAA,mEAAAuJ;;;;;AAWJ,IAAMC,OAAK,AAACvI,kCAAQ8C,GAAGC;AAAvB,AACE,AAAAtE,6BAAA,8CAAA,AAAAC,nDAAQuD,oEAAAA,/DAAKnG,qEAAMyM,KAAK,AAACrB,2BAAYe;;AACrChB;;;;;AAER,oCAAA,pCAAOpE,gFACEC,GAAGC,GAAGd;AADf,AAEE,IAAMuG,KAAO,AAAOvO,gCAAS6I;IACvBK,KAAO,AAAOlJ,gCAAS8I;IACvBkD,KAAO,AAACtN,iCAAUmK;IAClBoD,KAAO,AAACvN,iCAAUoK;IAClB0F,QAAO,AAAClJ,yBAAW0G;aAJzB,TAKMyC;AALN,AAKc,OAAAjK,6BAAA,8CAAA,AAAAC,gEAAA,nHAAQuD,oEAAAA,/DAAKnG,qEAAM,AAACkE,kCAAQ8C,GAAGC;;AAL7C,AAME,GAEE,oDAAA,pDAACvD,wDAAIgJ,qDAAGrF;AACR,AAAI,AAACuF;;AACD,GAAI,AAAClJ,6CAAEyG,GAAGC;AAAV;;AAAA;;;AAJN,GAQE,EAAI,6CAAA,7CAAC1G,iDAAIgJ,SAAI,6CAAA,7CAAChJ,iDAAI2D;AAClB,AAAI,AAACuF;;AACD,aAAA,LAAWvF;;AAVjB,GAYE,AAAC3D,6CAAEiJ,MAAM,AAAClJ,yBAAW2G;AACrB,GAAI,AAAC1G,6CAAEyG,GAAGC;AACR,AAAI,AAACwC;;AAAL;;AACA,IAAM9I,IAAE,kBAAI,iBAAA+I,oBAAK,iBAAAC,eAAA,iFAAA,uDAAA;AAAA,AAAA,QAAAA,6CAAAA,oDAAAA,TAAcH,gCAAAA;;AAAnB,AAAA,oBAAAE;AACK,gBAAA,WAAAE,vBAAMC;AAAN,AAAY,QAAA,gBAAA,oCAAAD,qBAAA,zDAAMhQ,hBAAawE;;AAA/B,AACE,SAAI,AAACmC,6CAAEgJ,GAAG,AAACM,UAAKhG,UAAK,AAACtD,6CAAE2D,GAAG,AAAC2F,UAAK/F;;AAFxC4F;;MAIF,AAACpB,iCAAUzE,GAAGC,GAAGd,MAEjB,AAACyE,+BAAG+B,MAAM3F,GAAGC,GAAGd;IACpB8G,IAAE,MAAA,LAAW5F;AAPnB,AAQE,GAAI,CAAG4F,IAAEnJ;AACP,AAAI,AAAC8I;;AACDK;;AACJnJ;;;;AA1BR,AA6BE,AAAI,AAAC8I;;AACD,aAAA,LAAWvF;;;;;;AAIrB,0CAAA,1CAAO6F,4FACJ1O;AADH,AAEE,IAAA2O,WAAc,yBAAA,iCAAI3O,jCAAK3B,zBAAU4G;IAAjC2J,eAAA,iFAAA,uDAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAEF,8CAAA,9CAAOE,oGACJC,KAAKtI,GAAGyH,KAAKvN;AADhB,AAEE,GAAI,gDAAA,hDAACwE,6CAAEsB;AACL9F;;AACA,WAAA,PAAOqO;WAAP,PACOC;IACAhP,OAAKiO;IACLgB,OAAKvO;;AAHZ,AAIE,GAAI,AAAC4B,cAAI2M;AACP,IAAAC,aAAeD;IAAfE,aAAA,AAAA7M,cAAA4M;IAAAE,eAAA,AAAApM,gBAAAmM;IAAAA,iBAAA,AAAAlM,eAAAkM;QAAAC,JAAOvN;SAAPsN,LAAWE;IACCC,IAAG,+CAAA,AAAAvK,+HAAA,9KAACwK,+DAAQT,MAAK,kDAAA,lDAAC3M,6CAAK6M;AADnC,AAEE,eAAO,AAAC7M,6CAAK4M,KAAK,kBAAI,AAACL,wCAAW1O,OAAM,CAAS6B,IAAEyN,GAAGzN;eAC/C,AAACM,6CAAK6M,KAAKnN;eACX,iBAAA2N,eAAC,AAACjR,oCAAayB;AAAf,AAAA,QAAAwP,6CAAAA,gDAAAA,LAAqB3N,4BAAAA;;eACrBwN;;;;;;;AACT,oBAAI,AAACX,wCAAW,AAAC7P,kCAAWmB;AAC1B,IAAMyP,OAAQ,8FAAA,9FAACtN,6CAAK,EAAI,AAACG,cAAI5B,OAAM,AAACoM,cAAIpM,MAAMA;IAClC4O,IAAE,+CAAA,AAAAvK,2BAAA,1EAACwK,+DAAQT,MAAKW;AAD5B,AAEE,AAAAtL,6BAAA,mBAAA,AAAAC,xBAAQ0K,yCAAAA,pCAAKY,0CAASD,KAAK,iBAAAE,WAAMnJ;IAANmJ,eAAA,EAAA,CAAAA,oBAAAnL,oBAAA,AAAAmL,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAY,YAAA,JAAKL;;;KAAjB;AAAuB,YAAA,JAAKA;;;;AAAGA;;;;;AAC1DP;;AACFA;;;;;;;AAEV,uCAAA,vCAAOa,sFACJd,KAAKtI,GAAGmD,GAAGC,GAAGlJ,KAAKmP;AADtB,AAEE,GAAI,gDAAA,hDAAC3K,6CAAEsB;AACL,oBAAI,AAACkI,wCAAW/E;AACd,OAACxH,6CAAK0N,kBAAM,iBAAMJ,OAAQ,kDAAA,lDAACtN,6CAAKzB;IACR4O,IAAE,+CAAA,AAAAvK,2BAAA,1EAACwK,+DAAQT,MAAKW;AAD5B,AAEE,AAAAtL,6BAAA,mBAAA,AAAAC,xBAAQ0K,yCAAAA,pCAAKY,0CAASD,KAAK,KAAA,JAAKH;;AAChC,QAAGA,IAAE,gBAAA,oCAAI3F,pCAAGpL,hBAAawE;;;AACvC,OAACZ,6CAAK0N,kBAAM,AAAClR,+BAAQiL;;;AACvBiG;;;AAEJ,sCAAA,tCAAOC,oFACJhB,KAAKtI,GAAGuJ,MAAMpG,GAAGC,GAAGlJ;AADvB,yHAEOA,1DACA,AAACmO,4CAAqBC,KAAKtI,GAAGuJ,nHAC9B,OAACH,qCAAcd,KAAKtI,GAAGmD,GAAGC,GAAGlJ;;AAEpC,sCAAA,tCAAOsP,oFACJC,MAAMF,MAAMG,OAAOC;AADtB,AAEE,OAACvM,+CACC,gBAAAwM,LAAKtB;AAAL,AAAA,IAAAuB,aAAAD;SAAA,AAAAjH,4CAAAkH,WAAA,IAAA,hEAAW7J;SAAX,AAAA2C,4CAAAkH,WAAA,IAAA,hEAAc1G;SAAd,AAAAR,4CAAAkH,WAAA,IAAA,hEAAiBzG;AAAjB,AACE,IAAMlJ,OAAK,AAACoP,oCAAahB,KAAKtI,GAAGuJ,MAAMpG,GAAGC,GAAG,AAAC5L,gCAAS2L;IACjDgC,KAAK,AAACtN,iCAAUsL;IAChBiC,KAAK,AAACvN,iCAAUuL;AAFtB,AAGE,IAAA0G,iBAAM9J;IAAN8J,qBAAA,EAAA,CAAAA,0BAAA9L,oBAAA,AAAA8L,mBAAA;AAAA,AAAA,QAAAA;KAAA;AACU,AAACC,4BAAcL,OAAOxP;;;KADhC;AAEU,oBAAI,iBAAA2N,oBAAK,oDAAA,pDAACnJ,uGAAO,AAACD,yBAAW0G,sDAAI,AAAC1G,yBAAW2G;AAAzC,AAAA,GAAAyC;AACK,OAAA,4FAAY8B;;AADjB9B;;;AAEF,AAACmC,gCAAYN,OAAOxP,KAAKiL,GAAGC,GAAGuE;;AAC/B,AAACM,6BAAeP,OAAOxP,KAAKkL;;;;KALxC;KAAA;AAMU,AAAC8E,yBAAWR,OAAOxP,KAAKkL;;;;AANlC;;;AAQAkD;GACJ,yBAAA,2CAAA,sDAAA,1HAAC1J,uIACD6K;;AAEJ,qCAAA,rCAAOU,kFACJhJ,KAAKlB,IAAIwJ;AADZ,AAEE,IAAAW,qBAAW,CAACjJ,qCAAAA,0CAAAA,PAAKlB,sBAAAA;AAAjB,AAAA,oBAAAmK;AAAA,QAAAA,JAASjD;AAAT,AACE,GAAI,AAACrL,cAAIqL;AACP,IAAO7L,IAAE,CAAC6L,kCAAAA,uCAAAA,PAAElH,mBAAAA;;AAAZ,AACE,oBAAI3E;AACF,IAAA+O,aAAgB/O;WAAhB,AAAAqH,4CAAA0H,WAAA,IAAA,lEAAO7B;SAAP,AAAA7F,4CAAA0H,WAAA,IAAA,hEAAYrK;IAAZsK,aACgB,AAACjL,iCAAUmJ;SAD3B,AAAA7F,4CAAA2H,WAAA,IAAA,hEACOnH;SADP,AAAAR,4CAAA2H,WAAA,IAAA,hEACUlH;AADV,AAEE,oBAAI,iBAAAyE,oBAAK,CAAC1G,qCAAAA,2CAAAA,RAAKqH,uBAAAA;AAAX,AAAA,oBAAAX;AAAiB,uDAAA,hDAACnJ,6CAAEsB;;AAApB6H;;;AACF,CAACsC,mEAAAA,oFAAAA,nBAAOhJ,gEAAAA,3DAAKqH,gEAAAA,3DAAKiB,gEAAAA;;AAClB,AAAA9L,8BAAA,6CAAA,AAAAC,wBAAA,3EAAQ6L,oEAAAA,9DAAM9N,wJAAMqE,GAAGmD,GAAGC;;;AAC5B,eAAO,CAAC+D,kCAAAA,wCAAAA,RAAEqB,oBAAAA;;;;AACZiB;;;;;AACJ,IAAAc,aAAc,AAAClL,iCAAUY;SAAzB,AAAA0C,4CAAA4H,WAAA,IAAA,hEAAOvI;SAAP,AAAAW,4CAAA4H,WAAA,IAAA,hEAAUtI;AAAV,AACE,AAAAtE,8BAAA,6CAAA,AAAAC,wBAAA,3EAAQ6L,oEAAAA,9DAAM9N,wJAAM,2HAAA,+CAAA,xKAAI,AAAC+C,6CAAE,AAAC7G,iCAAUmK,IAAI,AAACnK,iCAAUoK,qGACjCD,GAAGC;;AACvBwH;;;AACJA;;;AAEJ,AAAA,+BAAA,uCAAAe,tEAAOE;AAAP,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzM,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAOyM,wEACHvJ,KAAKlB;AADT,AAAA,OAAA1B,gBAEI,AAAC4L,mCAAOhJ,KAAKlB,IAAI,yBAAA,AAAA,zBAACrB;;;AAFtB,CAAA,6DAAA,7DAAO8L,wEAGHvJ,KAAYlB,IAAIyJ,OAAOC;AAH3B,2CAIO,AAACgB,2DAAMxJ,KAAKlB,3GACZ,OAACuJ,yGAAa,AAAKvJ,MAAKyJ,OAAOC;;;AALtC,CAAA,uDAAA,vDAAOe;;AAAP,AAOA,AAAA;;;8BAAA,sCAAAF,pEAAMK;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5M,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAM4M,uEAEF/L,EAAEC;AAFN,AAGG,qEAAA,2CAAA,8DAAA,vKAAC+L,0DAAKhM,EAAEC;;;AAHX,CAAA,4DAAA,5DAAM8L,uEAIF/L,EAAEC,EAAE4K;AAJR,AAKG,IAAMD,SAAO,iCAAA,jCAACqB;AAAd,AACE,GAAU,AAACrM,6CAAEI,EAAEC;AAAf;AAAA,AACE,IAAMwK,cAAM,AAAC5K,6BAAMG;IACbkM,cAAM,AAACrM,6BAAMI;IACboC,aAAM,yBAAA,zBAACvC;IACPuH,aAAM,AAACpE,kCAAMwH,YAAMyB,YAAM7J;AAH/B,AASE,2DAAA,AAAA5C,3DAACoM,2EAAOxJ,YAAK,AAACjC,kCAAQqK,YAAMyB,aAAOtB,OAAOC;;AAC1CD;;AACJA;;;AAlBL,CAAA,sDAAA,tDAAMmB;;AAAN,AAoBA,AAAAI,6EAAA,yDAAA,WACGnM,EAAEC,EAAE4K;AADP,AAEE,OAACmB,0DAAKhM,EAAEC,EAAE4K","names":["editscript$diff$a-star$INode$get_path$dyn","x__4509__auto__","m__4510__auto__","editscript.diff.a-star/get-path","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","editscript$diff$a-star$INode$get_value$dyn","editscript.diff.a-star/get-value","editscript$diff$a-star$INode$get_children$dyn","editscript.diff.a-star/get-children","editscript$diff$a-star$INode$add_child$dyn","editscript.diff.a-star/add-child","editscript$diff$a-star$INode$get_key$dyn","editscript.diff.a-star/get-key","editscript$diff$a-star$INode$get_parent$dyn","editscript.diff.a-star/get-parent","editscript$diff$a-star$INode$get_first$dyn","editscript.diff.a-star/get-first","editscript$diff$a-star$INode$get_last$dyn","editscript.diff.a-star/get-last","editscript$diff$a-star$INode$get_next$dyn","editscript.diff.a-star/get-next","editscript$diff$a-star$INode$set_next$dyn","editscript.diff.a-star/set-next","editscript$diff$a-star$INode$set_order$dyn","editscript.diff.a-star/set-order","editscript$diff$a-star$INode$get_order$dyn","editscript.diff.a-star/get-order","editscript$diff$a-star$INode$get_size$dyn","editscript.diff.a-star/get-size","editscript$diff$a-star$INode$set_size$dyn","editscript.diff.a-star/set-size","editscript.diff.a-star/INode","this","node","o","s","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","editscript.diff.a-star/Node","editscript.diff.a-star/->Node","path","value","parent","children","first","last","next","index","order","size","_","cljs.core/peek","n","cljs.core/long","cljs.core.assoc","editscript.diff.a-star/index*","data","editscript.diff.a-star/associative-children","cljs.core/reduce-kv","k","v","G__52831","G__52832","G__52833","G__52834","cljs.core.conj","editscript.diff.a-star/set-children","seq__52841","cljs.core/seq","chunk__52842","count__52843","i__52844","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","x","G__52858","G__52859","G__52860","G__52861","G__52862","G__52863","G__52864","G__52865","editscript.diff.a-star/list-children","cljs.core.reduce","i","G__52868","G__52869","G__52870","G__52871","editscript.diff.a-star/inc-order","cljs.core/-vreset!","cljs.core/-deref","editscript.diff.a-star/index-collection","type","G__52873","cljs.core/Keyword","js/Error","cs","cljs.core/vals","cljs.core.map","cljs.core/+","G__52880","cljs.core/deref","editscript.diff.a-star/index-value","editscript.edit/get-type","cljs.core._EQ_","editscript.diff.a-star/index","cljs.core/volatile!","editscript.diff.a-star/coord-hash","a","b","editscript.util.common/szudzik","editscript.diff.a-star/Coord","editscript.diff.a-star/->Coord","that","cljs.core/-hash","editscript.diff.a-star/get-coord","coord","editscript$diff$a-star$IStep$operator$dyn","editscript.diff.a-star/operator","editscript$diff$a-star$IStep$current$dyn","editscript.diff.a-star/current","editscript$diff$a-star$IStep$neighbor$dyn","editscript.diff.a-star/neighbor","editscript.diff.a-star/IStep","editscript.diff.a-star/Step","editscript.diff.a-star/->Step","op","cur","nbr","editscript.diff.a-star/get-step","step","cljs.core.juxt","editscript$diff$a-star$IState$get_came$dyn","editscript.diff.a-star/get-came","editscript$diff$a-star$IState$set_came$dyn","editscript.diff.a-star/set-came","editscript$diff$a-star$IState$get_open$dyn","editscript.diff.a-star/get-open","editscript$diff$a-star$IState$set_open$dyn","editscript.diff.a-star/set-open","editscript$diff$a-star$IState$get_g$dyn","editscript.diff.a-star/get-g","editscript$diff$a-star$IState$set_g$dyn","editscript.diff.a-star/set-g","editscript.diff.a-star/IState","came","open","g","editscript.diff.a-star/State","editscript.diff.a-star/->State","c","got","editscript.diff.a-star/get-state","state","editscript.diff.a-star/access-g","cljs.core.get","goog.math.Long/getMaxValue","editscript.diff.a-star/diff*","ra","rb","editscript.diff.a-star/compute-cost","gc","G__52962","sb","G__52964","G__52965","G__52966","p__52967","vec__52969","cljs.core.nth","editscript.diff.a-star/heuristic","end","gx","gy","G__52972","vec__52973","vec__52976","na","nb","y","dy","dx","editscript.diff.a-star/explore","goal","vec__52990","vec__52993","came'","tmp-g","G__52996","cljs.core.assoc_BANG_","editscript.diff.a-star/next-node","or__4212__auto__","editscript.diff.a-star/vec-frontier","vec__52999","vec__53002","a=b","x=gx","x<gx","y<gy","na'","nb'","G__53006","editscript.diff.a-star/map-frontier","init","vec__53018","vec__53021","ka","kb","cljs.core/contains?","va","vb","mb","cb","startb","enda","G__53025","editscript.diff.a-star/frontier","G__53027","editscript.diff.a-star/A*","cljs.core/transient","editscript.util.pairing.priority_map","vec__53046","cljs.core/empty?","cljs.core.ex_info","vec__53049","cost","cljs.core/persistent!","cljs.core.partial","cljs.core/pop","editscript.diff.a-star/vec-fn","cljs.core/vec","editscript.diff.a-star/use-quick","G__53057","vec__53058","seq__53059","first__53060","vec__53068","seq__53069","first__53070","ops","editscript.util.common/vec-edits","m","cljs.core/integer?","cljs.core.sequence","cljs.core.concat","cljs.core/List","G__53071","root","sa","typea","update","and__4210__auto__","fexpr__53081","p1__53072#","cc+1","r","editscript.diff.a-star/index-key?","G__53089","fexpr__53088","editscript.diff.a-star/adjust-delete-insert","trie","newp","prev","left","vec__53099","seq__53100","first__53101","ks","d","cljs.core.get_in","fexpr__53102","seen","cljs.core/assoc-in","G__53105","editscript.diff.a-star/adjust-append","path'","editscript.diff.a-star/convert-path","roota","editscript.diff.a-star/write-script","steps","script","opts","p__53118","vec__53119","G__53127","editscript.edit/delete-data","editscript.util.common/diff-str","editscript.edit/replace-data","editscript.edit/add-data","editscript.diff.a-star/trace*","temp__5751__auto__","vec__53143","vec__53146","vec__53162","var_args","G__53188","editscript.diff.a-star/trace","editscript.diff.a_star.trace","G__53205","editscript.diff.a-star/diff","editscript.diff.a_star.diff","editscript.edit/edits->script","rootb","editscript.util.common/diff-algo"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.diff.a-star\n  (:require [editscript.edit :as e]\n            [editscript.util.pairing :as pa]\n            [editscript.util.common :as co]\n            #?(:cljs [goog.math.Long]))\n  #?(:clj (:import [clojure.lang PersistentVector Keyword]\n                   [java.io Writer]\n                   [java.lang Comparable])))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n;; indexing\n\n(defprotocol INode\n  (get-path [this] \"Get the path to the node from root\")\n  (get-value [this] \"Get the actual data\")\n  (get-children [this] \"Get all children node in a map\")\n  (add-child [this node] \"Add a child node\")\n  (get-key [this] \"Get the key of this node\")\n  (get-parent [this] \"Get the parent node\")\n  (get-first [this] \"Get the first child node\")\n  (get-last [this] \"Get the last child node\")\n  (get-next [this] \"Get the next sibling node\")\n  (set-next [this node] \"Set the next sibling node\")\n  (set-order [this o] \"Set the traversal order of this node\")\n  (^long get-order [this] \"Get the order of this node in traversal\")\n  (^long get-size [this] \"Get the size of sub-tree, used to estimate cost\")\n  (set-size [this s] \"Set the size of sub-tree\"))\n\n(deftype Node [^PersistentVector path\n               value\n               parent\n               ^:unsynchronized-mutable children\n               ^:unsynchronized-mutable first\n               ^:unsynchronized-mutable last\n               ^:unsynchronized-mutable next\n               ^:unsynchronized-mutable index\n               ^:unsynchronized-mutable ^long order\n               ^:unsynchronized-mutable ^long size]\n  INode\n  (get-path [_] path)\n  (get-key [this] (-> this get-path peek))\n  (get-value [_] value)\n  (get-parent [_] parent)\n  (get-children [_] children)\n  (get-first [_] first)\n  (get-last [_] last)\n  (get-next [_] next)\n  (set-next [_ n] (set! next n))\n  (get-order [_] order)\n  (set-order [this o] (set! order (long o)) this)\n  (get-size [_] size)\n  (set-size [this s] (set! size (long s)) this)\n  (add-child [_ node]\n    (set! children (assoc children (get-key node) node))\n    (when last (set-next last node))\n    (when-not first (set! first node))\n    (set! last node)\n    node))\n\n#?(:clj\n   (defmethod print-method Node\n     [x ^Writer writer]\n     (print-method {:value    (get-value x)\n                    :order    (get-order x)\n                    :children (get-children x)}\n                   writer)))\n\n;; using defn instead of declare, see http://dev.clojure.org/jira/browse/CLJS-1871\n(defn ^:declared index* [order path data parent])\n\n(defn- associative-children\n  \"map and vector are associative\"\n  [order path data parent]\n  (reduce-kv\n   (fn [_ k v]\n     (index* order (conj path k) v parent))\n   nil\n   data))\n\n(defn- set-children\n  \"set is a map of keys to themselves\"\n  [order path data parent]\n  (doseq [x data]\n    (index* order (conj path x) x parent)))\n\n(defn- list-children\n  \"add index as key\"\n  [order path data parent]\n  (reduce\n   (fn [i x]\n     (index* order (conj path i) x parent)\n     (inc ^long i))\n   0\n   data))\n\n(defn- inc-order\n  \"order value reflects the size of elements\"\n  [order ^long size]\n  (vswap! order (fn [o] (+ size ^long o))))\n\n(defn- index-collection\n  [type order path data parent]\n  (let [node (->Node path data parent {} nil nil nil 0 0 1)]\n    (add-child parent node)\n    (case type\n      (:map :vec) (associative-children order path data node)\n      :set        (set-children order path data node)\n      :lst        (list-children order path data node))\n    (let [^long cs (->> (get-children node) vals (map get-size) (reduce +))\n          size     (+ (get-size node) cs)]\n      (doto node\n        (set-order @order)\n        (set-size size))\n      (inc-order order size))\n    node))\n\n(defn- index-value\n  [order path data parent]\n  (let [node (->Node path data parent nil nil nil nil 0 @order 1)]\n    (add-child parent node)\n    (inc-order order 1)\n    node))\n\n(defn- index*\n  [order path data parent]\n  (let [type (e/get-type data)]\n    (if (or (= type :val) (= type :str))\n      (index-value order path data parent)\n      (index-collection type order path data parent))))\n\n(defn- index\n  \"Traverse data to build an indexing tree of Nodes,\n  compute path, sizes of sub-trees, siblings, etc. for each Node.\n  This takes little time\"\n  [data]\n  (let [order (volatile! 0)]\n    (index* order [] data (->Node [] ::dummy nil {} nil nil nil 0 -1 0))))\n\n;; diffing\n\n(defn- coord-hash\n  [a b]\n  (co/szudzik (get-order a) (get-order b)))\n\n#?(:clj\n   (deftype Coord [^Node a\n                   ^Node b]\n     ;; Java's native hash is too slow,\n     ;; overriding hashCode significantly speeds things up\n     Object\n     (hashCode [_] (coord-hash a b))\n     (equals [this that]\n       (= (.hashCode this) (.hashCode that)))\n     (toString [_]\n       (str \"[\" (get-value a) \",\" (get-value b) \"]\"))\n\n     Comparable\n     (compareTo [this that]\n       (- (.hashCode this) (.hashCode that))))\n\n   :cljs\n   (deftype Coord [^Node a\n                   ^Node b]\n     IHash\n     (-hash [_] (coord-hash a b))\n\n     IEquiv\n     (-equiv [this that]\n       (= (-hash this) (-hash that)))\n\n     IComparable\n     (-compare [this that]\n       (- (-hash this) (-hash that)))))\n\n(defn- get-coord\n  [^Coord coord]\n  [(.-a coord) (.-b coord)])\n\n(defprotocol IStep\n  (operator [this] \"Operator to try\")\n  (current [this] \"Starting pair of nodes\")\n  (neighbor [this] \"Destination pair of nodes\"))\n\n(deftype Step [^Keyword op\n               ^Coord cur\n               ^Coord nbr]\n  IStep\n  (operator [_] op)\n  (current [_] cur)\n  (neighbor [_] nbr))\n\n#?(:clj\n   (defmethod print-method Step\n     [x ^Writer writer]\n     (print-method {:op  (operator x)\n                    :cur (current x)\n                    :nbr (neighbor x)}\n                   writer)))\n\n(defn- get-step\n  [step]\n  ((juxt operator current neighbor) step))\n\n(defprotocol IState\n  (get-came [this] \"Get the local succession map\")\n  (set-came [this came] \"Set the local succession map\")\n  (get-open [this] \"Get the open priority queue\")\n  (set-open [this open] \"Set the open priority queue\")\n  (get-g [this] \"Get the g cost map\")\n  (set-g [this g] \"Set the g cost map\"))\n\n(deftype State [^:unsynchronized-mutable came\n                ^:unsynchronized-mutable open\n                ^:unsynchronized-mutable g]\n  IState\n  (get-came [_] came)\n  (set-came [this c] (set! came c) this)\n  (get-open [_] open)\n  (set-open [this o] (set! open o) this)\n  (get-g [_] g)\n  (set-g [this got] (set! g got) this))\n\n(defn- get-state\n  [state]\n  ((juxt get-came get-open get-g) state))\n\n(defn- access-g\n  [g cur]\n  (get g cur #?(:clj Long/MAX_VALUE\n                :cljs (goog.math.Long/getMaxValue))))\n\n(defn ^:declared diff* [ra rb came])\n\n(defn- compute-cost\n  [^Coord cur came g op]\n  (let [^long gc (access-g g cur)]\n    (case op\n      :=      gc\n      ;; delete only cost 1, for not including deleted data in script\n      :-      (inc gc)\n      ;; these cost the size of included data, plus 1\n      (:a :i) (let [sb (get-size (.-b cur))]\n                (+ gc (inc ^long sb)))\n      :r      (+ gc ^long (diff* (.-a cur) (.-b cur) came)))))\n\n(defn- heuristic\n  \"A simplistic but optimistic estimate of the cost to reach goal when at (x y).\n\n  For nested structure, multiple deletion may be merged into one.\n  Also, because addition/replacement requires new value to be present in\n  editscript, whereas deletion does not, we assign estimate differently. \"\n  ^long [type cur end [gx gy]]\n  (case type\n    (:map :set) 0\n    (:vec :lst) (let [[na nb] (get-coord cur)\n                      [ra rb] (get-coord end)\n                      x       (if (identical? ra na) gx (get-order na))\n                      y       (if (identical? rb nb) gy (get-order nb))\n                      dy      (- ^long gy ^long y)\n                      dx      (- ^long gx ^long x)]\n                  (cond\n                    (== dx 0) dy\n                    (== dy 0) 1\n                    (> dx dy) 3\n                    (< dx dy) (- dy dx)\n                    :else     2))))\n\n(defn- explore\n  [type end came goal state step]\n  (let [[came' open g] (get-state state)\n        [op cur nbr]   (get-step step)\n        tmp-g          (compute-cost cur came g op)]\n    (if (>= ^long tmp-g ^long (access-g g nbr))\n      state\n      (doto state\n        (set-came (assoc! came' nbr [cur op]))\n        (set-open (assoc open nbr\n                         (+ ^long tmp-g ^long (heuristic type nbr end goal))))\n        (set-g (assoc! g nbr tmp-g))))))\n\n(defn- next-node\n  [na ra]\n  (or (get-next na) ra))\n\n(defn- vec-frontier\n  [end cur]\n  (let [[ra rb] (get-coord end)\n        [na nb] (get-coord cur)\n        a=b     (= (get-value na) (get-value nb))\n        x=gx    (identical? na ra)\n        x<gx    (not x=gx)\n        y<gy    (not (identical? nb rb))\n        na'     (next-node na ra)\n        nb'     (next-node nb rb)]\n    (if (and x<gx y<gy a=b)\n      [(->Step := cur (->Coord na' nb'))]\n      (cond-> []\n        x<gx            (conj (->Step :- cur (->Coord na' nb)))  ; delete\n        (and x<gx y<gy) (conj (->Step :r cur (->Coord na' nb'))) ; replace\n        (and x=gx y<gy) (conj (->Step :a cur (->Coord na nb')))  ; append\n        (and x<gx y<gy) (conj (->Step :i cur (->Coord na nb'))))))) ; insert\n\n(defn- map-frontier\n  [^Coord init end cur]\n  (let [[ra rb] (get-coord end)\n        [na nb] (get-coord cur)\n        ka      (get-key na)\n        kb      (get-key nb)]\n    (if (identical? na ra)\n      ;; testing keys of b\n      [(->Step (if (contains? (get-value ra) kb) := :a)\n               cur (->Coord ra (next-node nb rb)))]\n      (let [va  (get-value na)\n            vb  (get-value nb)\n            mb  (get-value rb)\n            na' (next-node na ra)\n            cb  (get-children rb)]\n        (if (identical? na' ra)\n          ;; transition point from testing keys of a to that of b\n          (let [startb (->Coord ra (.-b init))\n                enda   (->Coord na (cb ka))]\n            (if (contains? mb ka)\n              (if (= ka kb)\n                [(->Step (if (= va vb) := :r) cur startb)]\n                [(->Step := cur enda)\n                 (->Step :r enda startb)])\n              [(->Step :- cur startb)]))\n          ;; testing keys of a\n          [(if (contains? mb ka)\n             (if (= ka kb)\n               (->Step (if (= va vb) := :r)\n                       cur (->Coord na' (or (cb (get-key na')) nb)))\n               (->Step := cur (->Coord na (cb ka))))\n             (->Step :- cur (->Coord na' nb)))])))))\n\n(defn- frontier\n  [type init end cur]\n  (case type\n    (:vec :lst) (vec-frontier end cur)\n    (:map :set) (map-frontier init end cur)))\n\n(defn- A*\n  ^long [type ra rb came]\n  (let [end  (->Coord ra rb)\n        init (->Coord (get-first ra) (get-first rb))\n        goal [(get-order ra) (get-order rb)]]\n    (loop [state (->State (transient {})\n                          (pa/priority-map init (heuristic type init end goal))\n                          (transient {init 0}))]\n      (let [[came' open _] (get-state state)]\n        (if (empty? open)\n          (throw (ex-info \"A* diff fails to find a solution\" {:ra ra :rb rb}))\n          (let [[cur cost] (peek open)]\n            (if (= cur end)\n              (do (vswap! came assoc end (persistent! came'))\n                  cost)\n              (recur (reduce\n                      (partial explore type end came goal)\n                      (set-open state (pop open))\n                      (frontier type init end cur))))))))))\n\n(defn- vec-fn\n  [node]\n  (let [v (get-value node)]\n    (if (= :vec (e/get-type v))\n      v\n      (vec v))))\n\n(defn- use-quick\n  ^long [ra rb came]\n  (loop [[op & ops] (co/vec-edits (vec-fn ra) (vec-fn rb))\n         na         (get-first ra)\n         nb         (get-first rb)\n         m          (transient {})\n         cost       0]\n    (if op\n      (let [na' (next-node na ra)\n            nb' (next-node nb rb)\n            cur (->Coord na nb)\n            sb  (get-size nb)]\n        (if (integer? op)\n          (recur (if (> ^long op 1) `[~(dec ^long op) ~@ops] ops)\n                 na' nb'\n                 (assoc! m (->Coord na' nb') [cur :=])\n                 (long cost))\n          (case op\n            :- (recur ops na' nb\n                      (assoc! m (->Coord na' nb) [cur op])\n                      (inc (long cost)))\n            :+ (recur ops na nb'\n                      (assoc! m (->Coord na nb')\n                              [cur (if (identical? na ra) :a :i)])\n                      (+ (long cost) 1 (long sb)))\n            :r (recur ops na' nb'\n                      (assoc! m (->Coord na' nb') [cur op])\n                      (+ (long cost) 1 (long sb))))))\n      (let [root (->Coord ra rb)]\n        (vswap! came assoc root (persistent! m))\n        cost))))\n\n(defn- diff*\n  ^long [ra rb came]\n  (let [sa     ^long (get-size ra)\n        sb     ^long (get-size rb)\n        va     (get-value ra)\n        vb     (get-value rb)\n        typea  (e/get-type va)\n        update #(vswap! came assoc (->Coord ra rb) {})]\n    (cond\n      ;; both are leaves, skip or replace\n      (= 1 sa sb)\n      (do (update)\n          (if (= va vb)\n            0\n            2))\n      ;; one of them is leaf, replace\n      (or (= 1 sa) (= 1 sb))\n      (do (update)\n          (inc ^long sb))\n      ;; non-empty coll with same type, drill down\n      (= typea (e/get-type vb))\n      (if (= va vb)\n        (do (update) 0)\n        (let [a (if (and (#{:vec :lst} typea)\n                         (let [cc+1 #(-> % get-children count inc)]\n                           (or (= sa (cc+1 ra)) (= sb (cc+1 rb)))))\n                  ;; vec or lst contains leaves only, safe to use quick algo.\n                  (use-quick ra rb came)\n                  ;; otherwise run A*\n                  (A* typea ra rb came))\n              r (inc ^long sb)]\n          (if (< r a)\n            (do (update)\n                r)\n            a)))\n      ;; types differ, can only replace\n      :else\n      (do (update)\n          (inc ^long sb)))))\n\n;; generating editscript\n\n(defn- index-key?\n  [node]\n  (#{:vec :lst} (-> node get-value e/get-type)))\n\n(defn- adjust-delete-insert\n  [trie op root path]\n  (if (= op :=)\n    path\n    (loop [newp []\n           prev []\n           node root\n           left path]\n      (if (seq left)\n        (let [[k & ks] left\n              ^long d  (get-in @trie (conj prev :delta) 0)]\n          (recur (conj newp (if (index-key? node) (+ ^long k d) k))\n                 (conj prev k)\n                 ((get-children node) k)\n                 ks))\n        (if (index-key? (get-parent node))\n          (let [seen    (conj (if (seq path) (pop path) path) :delta)\n                ^long d (get-in @trie seen 0)]\n            (vswap! trie assoc-in seen (case op :- (dec d) :i (inc d) d))\n            newp)\n          newp)))))\n\n(defn- adjust-append\n  [trie op na nb path path']\n  (if (= op :a)\n    (if (index-key? na)\n      (conj path' (let [seen    (conj path :delta)\n                        ^long d (get-in @trie seen 0)]\n                    (vswap! trie assoc-in seen (inc d))\n                    (+ d (-> na get-children count))))\n      (conj path' (get-key nb)))\n    path'))\n\n(defn- convert-path\n  [trie op roota na nb path]\n  (->> path\n       (adjust-delete-insert trie op roota)\n       (adjust-append trie op na nb path)))\n\n(defn- write-script\n  [steps roota script opts]\n  (reduce\n    (fn [trie [op na nb]]\n      (let [path (convert-path trie op roota na nb (get-path na))\n            va   (get-value na)\n            vb   (get-value nb)]\n        (case op\n          :-      (e/delete-data script path)\n          :r      (if (and (= :str (e/get-type va) (e/get-type vb))\n                           (:str-diff? opts))\n                    (co/diff-str script path va vb opts)\n                    (e/replace-data script path vb))\n          (:a :i) (e/add-data script path vb)\n          nil)\n        trie))\n    (volatile! {:delta 0})\n    steps))\n\n(defn- trace*\n  [came cur steps]\n  (if-let [m (came cur)]\n    (if (seq m)\n      (loop [v (m cur)]\n        (if v\n          (let [[prev op] v\n                [na nb]   (get-coord prev)]\n            (if (and (came prev) (= op :r))\n              (trace* came prev steps)\n              (vswap! steps conj [op na nb]))\n            (recur (m prev)))\n          steps))\n      (let [[ra rb] (get-coord cur)]\n        (vswap! steps conj [(if (= (get-value ra) (get-value rb)) := :r)\n                            ra rb])\n        steps))\n    steps))\n\n(defn- trace\n  ([came cur]\n   @(trace* came cur (volatile! '())))\n  ([came ^Coord cur script opts]\n   (-> (trace came cur)\n       (write-script (.-a cur) script opts))))\n\n(defn diff\n  \"Create an EditScript that represents the minimal difference between `b` and `a`\"\n  ([a b]\n   (diff a b {:str-diff? false}))\n  ([a b opts]\n   (let [script (e/edits->script [])]\n     (when-not (= a b)\n       (let [roota (index a)\n             rootb (index b)\n             came  (volatile! {})\n             cost  (diff* roota rootb came)]\n         ;; #?(:clj (let [total          (* (get-size roota) (get-size rootb))\n         ;;               ^long explored (reduce + (map count (vals @came)))]\n         ;;           (printf \"cost is %d, explored %d of %d - %.1f%%\\n\"\n         ;;                   cost explored total\n         ;;                   (* 100 (double (/ explored total))))))\n         (trace @came (->Coord roota rootb) script opts)\n         script))\n     script)))\n\n(defmethod co/diff-algo :a-star\n  [a b opts]\n  (diff a b opts))\n"]}