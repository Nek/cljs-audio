{"version":3,"sources":["editscript/util/common.cljc"],"mappings":"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","names":["editscript.util.common/szudzik","x","y","editscript.util.common/vec-edits*","a","b","n","m","delta","snake","k","ax","cljs.core.get","by","cljs.core._EQ_","cljs.core/type","fp-fn","fp","vec__49992","cljs.core.nth","vec__49995","dk-1","vk-1","dk+1","vk+1","x__4295__auto__","y__4296__auto__","sk","ops","es","cljs.core.conj","cljs.core.assoc_BANG_","p","cljs.core/transient","cljs.core/first","cljs.core/persistent!","cljs.core/second","cljs.core/rest","editscript.util.common/swap-ops","edits","cljs.core.mapv","op","G__50006","cljs.core/Keyword","editscript.util.common/min+plus->replace","v","cljs.core.into","cljs.core.comp","cljs.core.partition_by","cljs.core/integer?","cljs.core.mapcat","coll","cljs.core/count","vec__50015","ms","ps","p1__50011#","cljs.core/split-with","mc","pc","Math/abs","rs","cljs.core.repeat","cljs.core.concat","editscript.util.common/vec-edits","editscript.util.common/group-str","i","cljs.core/volatile!","cljs.core/identity","c","cljs.core.partial","cljs.core/+","s","cljs.core/deref","cljs.core.subs","editscript.util.common/diff-str","script","path","_","cb","unchanged","cljs.core.transduce","cljs.core.filter","edits'","editscript.edit/replace-str","editscript.edit/replace-data","js/editscript","js/editscript.util","js/editscript.util.common","js/editscript.util.common.diff-algo","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","fexpr__50081","cljs.core/MultiFn","cljs.core.symbol","editscript.util.common/diff-algo","opts"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.util.common\n  (:refer-clojure :exclude [slurp])\n  (:require [editscript.edit :as e]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn szudzik\n  \"Szudzik's paring function\"\n  [^long x ^long y]\n  (if (> y x)\n    (+ x (* y y))\n    (+ x y (* x x))))\n\n(defmacro coll-case\n  [a b script path type diff-fn opts]\n  `(case (e/get-type ~b)\n     :nil  (e/delete-data ~script ~path)\n     ~type (~diff-fn ~script ~path ~a ~b ~opts)\n     (e/replace-data ~script ~path ~b)))\n\n(defn- vec-edits*\n  \"Based on 'Wu, S. et al., 1990, An O(NP) Sequence Comparison Algorithm,\n  Information Processing Letters, 35:6, p317-23.'\n\n  A greedy algorithm, attempting to get to the furthest points with a given\n  number of edits. Very fast. However, it does not have replacement operations,\n  so it is not very useful for nested trees. It can also only do unit cost for\n  addition and deletion. \"\n  [a b ^long n ^long m]\n  (let [delta (- n m)\n        snake (fn [^long k ^long x]\n                (loop [x x y (- x k)]\n                  (let [ax (get a x) by (get b y)]\n                    (if (and (< x n)\n                             (< y m)\n                             (= (type ax) (type by))\n                             (= ax by))\n                      (recur (inc x) (inc y))\n                      x))))\n        fp-fn (fn [fp ^long k]\n                (let [[dk-1 vk-1] (get fp (dec k) [-1 []])\n                      dk-1        (inc ^long dk-1)\n                      [dk+1 vk+1] (get fp (inc k) [-1 []])\n                      x           (max dk-1 ^long dk+1)\n                      ^long sk    (snake k x)\n                      ops         (let [es (if (> dk-1 ^long dk+1)\n                                             (conj vk-1 :-)\n                                             (conj vk+1 :+))]\n                                    (if (> sk x)\n                                      (conj es (- sk x))\n                                      es))]\n                  (assoc! fp k [sk ops])))\n        fp    (loop [p 0 fp (transient {})]\n                (let [fp (loop [k (* -1 p) fp fp]\n                           (if (< k delta)\n                             (recur (inc k) (fp-fn fp k))\n                             fp))\n                      fp (loop [k (+ delta p) fp fp]\n                           (if (< delta k)\n                             (recur (dec k) (fp-fn fp k))\n                             fp))\n                      fp (fp-fn fp delta)]\n                  (if-not (= n (first (get fp delta)))\n                    (recur (inc p) fp)\n                    (persistent! fp))))]\n    (-> fp (get delta) second rest)))\n\n(defn- swap-ops\n  [edits]\n  (mapv (fn [op] (case op :+ :- :- :+ op)) edits))\n\n(defn min+plus->replace\n  \"Aggressively turn :- and :+ into replacements.\"\n  [v]\n  (into []\n        (comp\n          (partition-by integer?)\n          (mapcat\n            (fn [coll]\n              (let [m (first coll)]\n                (if (or (integer? m) (= 1 (count coll)))\n                  coll\n                  (let [p       (if (= m :-) :+ :-)\n                        [ms ps] (split-with #(= % m) coll)\n                        mc      (count ms)\n                        pc      (count ps)\n                        delta   (Math/abs (- mc pc))\n                        rs      (repeat (- (max mc pc) delta) :r)]\n                    (cond\n                      (< mc pc) (concat rs (repeat delta p))\n                      (= mc pc) rs\n                      :else     (concat (repeat delta m) rs))))))))\n        v))\n\n(defn vec-edits\n  [a b]\n  (let [n (count a)\n        m (count b)]\n    (min+plus->replace (if (< n m)\n                         (swap-ops (vec-edits* b a m n))\n                         (vec-edits* a b n m)))))\n\n(defn- group-str\n  [edits b]\n  (let [i (volatile! 0)]\n    (into []\n          (comp\n            (partition-by identity)\n            (mapcat\n              (fn [coll]\n                (let [x (first coll)\n                      c (count coll)]\n                  (cond\n                    (integer? x) (do (vswap! i (partial + x)) coll)\n                    (= :- x)     [[x c]]\n                    (= :r x)     (let [s (subs b @i (+ ^long @i c))]\n                                   (vswap! i (partial + c))\n                                   [[x s]])\n                    (= :+ x)     (let [s (subs b @i (+ ^long @i c))]\n                                   (vswap! i (partial + c))\n                                   [[x s]]))))))\n          edits)))\n\n(defn diff-str\n  [script path a b _]\n  (let [edits     (vec-edits a b)\n        cb        (count b)\n        unchanged (double (transduce (filter integer?) + edits))]\n    (if (< (* cb 0.7) unchanged)\n      (let [edits' (group-str edits b)]\n        (e/replace-str script path edits'))\n      (e/replace-data script path b))))\n\n#?(:clj (defmacro vslurp\n          [file]\n          (clojure.core/slurp file)))\n\n\n(defmulti diff-algo (fn [_ _ opts] (:algo opts)))\n"]}